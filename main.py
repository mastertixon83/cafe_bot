# main.py (–ü–û–õ–ù–ê–Ø –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)

from loguru import logger
import traceback
import asyncio
import sys
from typing import Optional
from contextlib import asynccontextmanager

# –ù–û–í–´–ï –ò–ú–ü–û–†–¢–´ –¥–ª—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
import uvicorn
from fastapi import FastAPI

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.storage.memory import MemoryStorage

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä—ã
from core.handlers.basic import router as basic_router
from core.handlers.admin_handlers import router as admin_router
from core.handlers.barista_handlers import router as barista_router  # <-- –î–û–ë–ê–í–õ–ï–ù–û

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —É—Ç–∏–ª–∏—Ç—ã
from core.utils.database import postgres_client
from config import config

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
from core.webapp import app as fastapi_app


class BotApplication:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –±–æ—Ç–∞.
    –¢–µ–ø–µ—Ä—å –æ–Ω –Ω–µ —É–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—É—Å–∫–æ–º –ø—Ä–æ—Ü–µ—Å—Å–∞, –∞ —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏.
    """

    def __init__(self):
        self.bot: Optional[Bot] = None
        self.storage = MemoryStorage()
        self.dp: Optional[Dispatcher] = None
        logger.info("BotApplication instance created")

    async def initialize(self) -> None:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–æ—Ç–∞."""
        try:
            logger.info("Initializing bot components...")

            # Telegram Bot
            self.bot = Bot(
                token=config.TELEGRAM_BOT_TOKEN,
                default=DefaultBotProperties(parse_mode="HTML")
            )
            logger.info("‚úÖ Telegram bot initialized successfully")

            # Dispatcher
            self.dp = Dispatcher(storage=self.storage)
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º –≤—Å–µ —Ä–æ—É—Ç–µ—Ä—ã
            self.dp.include_router(basic_router)
            self.dp.include_router(admin_router)
            self.dp.include_router(barista_router)  # <-- –î–û–ë–ê–í–õ–ï–ù–û
            logger.info("‚úÖ Dispatcher initialized successfully")

            # Lifecycle hooks
            self.dp.startup.register(self._on_startup)
            self.dp.shutdown.register(self._on_shutdown)
            logger.info("‚úÖ Lifecycle handlers registered")

            # PostgreSQL
            await postgres_client.initialize()
            logger.info("‚úÖ PostgreSQL client initialized successfully")

            logger.info("üöÄ All bot components initialized successfully")

        except Exception as e:
            logger.error(f"‚ùå Failed to initialize bot components: {e}")
            await self.cleanup()
            raise

    async def start_polling(self) -> None:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–ª–∏–Ω–≥ –±–æ—Ç–∞."""
        if not self.bot or not self.dp:
            raise RuntimeError("Bot or Dispatcher not initialized")
        logger.info("üöÄ Starting bot polling...")
        await self.dp.start_polling(self.bot, allowed_updates=["message", "callback_query"])

    async def stop_polling(self) -> None:
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–æ–ª–ª–∏–Ω–≥ –∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç —Ö—Ä–∞–Ω–∏–ª–∏—â–µ."""
        if not self.dp:
            return
        logger.info("üõë Stopping bot polling...")
        await self.dp.storage.close()
        logger.info("‚úÖ Bot polling stopped")

    async def cleanup(self) -> None:
        """–û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–µ—Å—É—Ä—Å–æ–≤."""
        logger.info("üßπ Starting bot cleanup process...")

        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ PostgreSQL –ø—É–ª–∞
        try:
            if postgres_client and getattr(postgres_client, "pool", None):
                await postgres_client.close()
                logger.info("‚úÖ PostgreSQL pool closed successfully")
        except Exception as e:
            logger.error(f"‚ùå Error while closing PostgreSQL pool: {e}")

        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏ –±–æ—Ç–∞
        try:
            if self.bot and self.bot.session and not self.bot.session.closed:
                await self.bot.session.close()
                logger.info("‚úÖ Bot session closed successfully")
        except Exception as e:
            logger.error(f"‚ùå Error closing bot session: {e}")

        logger.info("üßπ Bot cleanup finished successfully")

    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã _on_startup –∏ _on_shutdown –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    async def _on_startup(self, bot: Bot) -> None:
        startup_message = "üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!"
        try:
            await bot.send_message(config.ADMIN_CHAT_ID, startup_message)
            logger.info("‚úÖ Startup notification sent to admin")
        except Exception as e:
            logger.error(f"‚ùå Failed to send startup notification: {e}")
        logger.info(startup_message)

    async def _on_shutdown(self, bot: Bot) -> None:
        shutdown_message = "üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
        try:
            await bot.send_message(config.ADMIN_CHAT_ID, shutdown_message)
            logger.info("‚úÖ Shutdown notification sent to admin")
        except Exception as e:
            logger.error(f"‚ùå Failed to send shutdown notification: {e}")
        logger.info(shutdown_message)

    # –ú–ï–¢–û–î–´ run, _setup_signal_handlers, _trigger_shutdown –£–î–ê–õ–ï–ù–´
    # —Ç–∞–∫ –∫–∞–∫ —Ç–µ–ø–µ—Ä—å –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å–∏–≥–Ω–∞–ª–æ–≤ (Ctrl+C)
    # —É–ø—Ä–∞–≤–ª—è–µ—Ç –≤–µ–±-—Å–µ—Ä–≤–µ—Ä Uvicorn.


# --- –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° FASTAPI ---

# –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –Ω–∞—à–µ–≥–æ –∫–ª–∞—Å—Å–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º
bot_app = BotApplication()


@asynccontextmanager
async def lifespan(app: FastAPI):
    """
    –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä FastAPI, –∫–æ—Ç–æ—Ä—ã–π —É–ø—Ä–∞–≤–ª—è–µ—Ç –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º
    –Ω–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –û–Ω –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞ –∏
    –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –µ–≥–æ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞.
    """
    # --- –ö–æ–¥ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞ ---
    logger.info("üöÄ Starting application lifespan...")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –±–æ—Ç–∞ (–ë–î, —Ä–æ—É—Ç–µ—Ä—ã –∏ —Ç.–¥.)
    await bot_app.initialize()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥ –±–æ—Ç–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ
    polling_task = asyncio.create_task(bot_app.start_polling())
    logger.info("Bot polling has been scheduled to run in the background.")

    # –°–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ
    yield

    # --- –ö–æ–¥ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–µ—Ä–≤–µ—Ä–∞ (–ø–æ—Å–ª–µ Ctrl+C) ---
    logger.info("üßπ Shutting down application lifespan...")

    # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á—É –ø–æ–ª–ª–∏–Ω–≥–∞
    if not polling_task.done():
        logger.info("Cancelling polling task...")
        polling_task.cancel()
        try:
            await polling_task
        except asyncio.CancelledError:
            logger.info("‚úÖ Polling task cancelled successfully")

    # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –±–æ—Ç–∞
    await bot_app.stop_polling()

    # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É —Ä–µ—Å—É—Ä—Å–æ–≤ (–∑–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–π, –ø—É–ª–æ–≤ –ë–î)
    await bot_app.cleanup()
    logger.info("üëã Application shutdown complete")


# –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –∫ FastAPI
fastapi_app.router.lifespan_context = lifespan

# --- –¢–û–ß–ö–ê –í–•–û–î–ê –í –ü–†–ò–õ–û–ñ–ï–ù–ò–ï ---

if __name__ == "__main__":
    logger.info("üèÅ Launching combined web and bot application...")
    try:
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config.validate()

        # –ó–∞–ø—É—Å–∫–∞–µ–º Uvicorn, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –≤—Å–µ–º
        uvicorn.run(
            fastapi_app,
            host="0.0.0.0",  # –°–ª—É—à–∞–µ–º –Ω–∞ –≤—Å–µ—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞—Ö
            port=8010,  # –ü–æ—Ä—Ç –¥–ª—è Cloudflare Tunnel
            log_level="info"
        )
    except Exception as e:
        logger.critical(f"üí• Fatal error during application launch: {e}\n{traceback.format_exc()}")
        sys.exit(1)
