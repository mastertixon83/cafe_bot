from loguru import logger
import traceback
import asyncio
import sys
from typing import Optional
from contextlib import asynccontextmanager

import uvicorn
from fastapi import FastAPI

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
# --- –ò–ó–ú–ï–ù–ï–ù–ò–ï 1: –£–±–∏—Ä–∞–µ–º MemoryStorage, –¥–æ–±–∞–≤–ª—è–µ–º RedisStorage ---
from aiogram.fsm.storage.redis import RedisStorage
from redis.asyncio.client import Redis
from aiogram.types import BotCommand, BotCommandScopeDefault

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä—ã
from core.handlers.basic import router as basic_router
from core.handlers.admin_handlers import router as admin_router
from core.handlers.barista_handlers import router as barista_router

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —É—Ç–∏–ª–∏—Ç—ã
from core.utils.database import postgres_client
from config import config

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
from core.webapp import app as fastapi_app


class BotApplication:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –±–æ—Ç–∞.
    """

    def __init__(self):
        self.bot: Optional[Bot] = None
        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï 2: –£–±–∏—Ä–∞–µ–º self.storage = MemoryStorage() ---
        # self.storage = MemoryStorage()
        self.dp: Optional[Dispatcher] = None
        logger.info("BotApplication instance created")

    async def set_bot_commands(self, bot: Bot):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –≤–∏–¥–Ω—ã –≤ –º–µ–Ω—é Telegram."""
        commands = [
            BotCommand(command="start", description="üèÅ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
            BotCommand(command="board", description="üìã –û—Ç–∫—Ä—ã—Ç—å –¥–æ—Å–∫—É –∑–∞–∫–∞–∑–æ–≤ (–¥–ª—è –±–∞—Ä–∏—Å—Ç–∞)"),
            BotCommand(command="admin", description="üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"),
        ]
        await bot.set_my_commands(commands, BotCommandScopeDefault())
        logger.info("‚úÖ Bot commands have been set.")

    async def initialize(self) -> None:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–æ—Ç–∞."""
        try:
            logger.info("Initializing bot components...")

            # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï 3: –°–æ–∑–¥–∞–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º RedisStorage ---
            # 'redis' - —ç—Ç–æ –∏–º—è —Å–µ—Ä–≤–∏—Å–∞ –∏–∑ —Ç–≤–æ–µ–≥–æ docker-compose.yml
            redis_client = Redis(host='redis', port=6379, db=0)

            # –°—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è 2 —Å—É—Ç–æ–∫ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö: 60 * 60 * 24 * 2 = 172800)
            storage = RedisStorage(
                redis=redis_client,
                state_ttl=172800,
                data_ttl=172800
            )

            self.bot = Bot(
                token=config.TELEGRAM_BOT_TOKEN,
                default=DefaultBotProperties(parse_mode="HTML")
            )
            logger.info("‚úÖ Telegram bot initialized successfully")

            # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï 4: –ü–µ—Ä–µ–¥–∞–µ–º –Ω–æ–≤—ã–π storage –≤ Dispatcher ---
            self.dp = Dispatcher(storage=storage)

            self.dp.include_router(basic_router)
            self.dp.include_router(admin_router)
            self.dp.include_router(barista_router)
            logger.info("‚úÖ Dispatcher initialized successfully")

            self.dp.startup.register(self._on_startup)
            self.dp.shutdown.register(self._on_shutdown)
            logger.info("‚úÖ Lifecycle handlers registered")

            await postgres_client.initialize()
            logger.info("‚úÖ PostgreSQL client initialized successfully")

            logger.info("üöÄ All bot components initialized successfully")

        except Exception as e:
            logger.error(f"‚ùå Failed to initialize bot components: {e}")
            await self.cleanup()
            raise

    async def start_polling(self) -> None:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–ª–∏–Ω–≥ –±–æ—Ç–∞."""
        if not self.bot or not self.dp:
            raise RuntimeError("Bot or Dispatcher not initialized")
        logger.info("üöÄ Starting bot polling...")
        await self.dp.start_polling(self.bot, allowed_updates=["message", "callback_query"])

    async def stop_polling(self) -> None:
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–æ–ª–ª–∏–Ω–≥ –∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç —Ö—Ä–∞–Ω–∏–ª–∏—â–µ."""
        if not self.dp: return
        logger.info("üõë Stopping bot polling...")
        await self.dp.storage.close()
        logger.info("‚úÖ Bot polling stopped")

    async def cleanup(self) -> None:
        """–û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–µ—Å—É—Ä—Å–æ–≤."""
        logger.info("üßπ Starting bot cleanup process...")
        try:
            if postgres_client and getattr(postgres_client, "pool", None):
                await postgres_client.close()
                logger.info("‚úÖ PostgreSQL pool closed successfully")
        except Exception as e:
            logger.error(f"‚ùå Error while closing PostgreSQL pool: {e}")
        try:
            if self.bot and self.bot.session and not self.bot.session.closed:
                await self.bot.session.close()
                logger.info("‚úÖ Bot session closed successfully")
        except Exception as e:
            logger.error(f"‚ùå Error closing bot session: {e}")
        logger.info("üßπ Bot cleanup finished successfully")

    async def _on_startup(self, bot: Bot) -> None:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞."""
        await self.set_bot_commands(bot)

        startup_message = "üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!"
        try:
            await bot.send_message(config.ADMIN_CHAT_ID, startup_message)
            logger.info("‚úÖ Startup notification sent to admin")
        except Exception as e:
            logger.error(f"‚ùå Failed to send startup notification: {e}")
        logger.info(startup_message)

    async def _on_shutdown(self, bot: Bot) -> None:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞."""
        shutdown_message = "üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
        try:
            await bot.send_message(config.ADMIN_CHAT_ID, shutdown_message)
            logger.info("‚úÖ Shutdown notification sent to admin")
        except Exception as e:
            logger.error(f"‚ùå Failed to send shutdown notification: {e}")
        logger.info(shutdown_message)


# --- –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° FASTAPI ---

bot_app = BotApplication()


@asynccontextmanager
async def lifespan(app: FastAPI):
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä FastAPI –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º."""
    logger.info("üöÄ Starting application lifespan...")
    await bot_app.initialize()
    polling_task = asyncio.create_task(bot_app.start_polling())
    logger.info("Bot polling has been scheduled to run in the background.")
    yield
    logger.info("üßπ Shutting down application lifespan...")
    if not polling_task.done():
        logger.info("Cancelling polling task...")
        polling_task.cancel()
        try:
            await polling_task
        except asyncio.CancelledError:
            logger.info("‚úÖ Polling task cancelled successfully")
    await bot_app.stop_polling()
    await bot_app.cleanup()
    logger.info("üëã Application shutdown complete")


fastapi_app.router.lifespan_context = lifespan

# --- –¢–û–ß–ö–ê –í–•–û–î–ê –í –ü–†–ò–õ–û–ñ–ï–ù–ò–ï ---

if __name__ == "__main__":
    logger.info("üèÅ Launching combined web and bot application...")
    try:
        config.validate()
        uvicorn.run(
            fastapi_app,
            host="0.0.0.0",
            port=8010,
            log_level="info"
        )
    except Exception as e:
        logger.critical(f"üí• Fatal error during application launch: {e}\n{traceback.format_exc()}")
        sys.exit(1)
