# =================================================================
#               –ò–ú–ü–û–†–¢–´ –ò –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
# =================================================================
from aiogram import F, Router
from aiogram.types import Message, CallbackQuery, FSInputFile, InputMediaPhoto, InlineKeyboardMarkup, \
    InlineKeyboardButton
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from pathlib import Path
import datetime
import time
from loguru import logger
import json
from zoneinfo import ZoneInfo

# --- –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
from core.utils.states import Order
from core.keyboards.inline.inline_menu import (
    mainMenu_ikb, type_cofe_ikb, cup_cofe_ikb, time_cofe_ikb, ready_cofe_ikb,
    get_loyalty_ikb, partners_ikb, syrup_choice_ikb, addon_offer_ikb,
    croissant_choice_ikb
)
from core.utils.database import postgres_client
from config import config
from core.webapp.ws.orders_ws import manager as ws_manager
from core.utils.helpers import calculate_order_total
from core.services.epay_service import epay_service

router = Router()


# =================================================================
#               –°–ï–†–í–ò–°–ù–´–ô –°–õ–û–ô (–ë–ò–ó–ù–ï–°-–õ–û–ì–ò–ö–ê)
# =================================================================

# <-- –ò–ó–ú–ï–ù–ï–ù–û: –§—É–Ω–∫—Ü–∏—è —Ç–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç order_data (—Å–ª–æ–≤–∞—Ä—å), –∞ –Ω–µ state, –∏ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π payment_id
async def process_and_save_order(order_data: dict, user_id: int, username: str, first_name: str, bot,
                                 payment_id: str = None, status: str = 'new') -> dict | None:
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –≤—Å—é –ª–æ–≥–∏–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: –∑–∞–ø–∏—Å—å –≤ –ë–î, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è,
    –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã. –ò–∑–æ–ª–∏—Ä—É–µ—Ç –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É –æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä–∞.
    """
    try:
        data = order_data  # <-- –ò–ó–ú–ï–ù–ï–ù–û: –†–∞–±–æ—Ç–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é —Å–æ —Å–ª–æ–≤–∞—Ä–µ–º
        order_is_free = data.get('use_free', False)
        total_price = calculate_order_total(data)

        # 1. –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –∑–∞–∫–∞–∑–µ –≤ –ë–î
        order_db_data = {
            'type': data.get('type'),
            'cup': data.get('cup'),
            'syrup': data.get('syrup', '–ë–µ–∑ —Å–∏—Ä–æ–ø–∞'),
            'croissant': data.get('croissant', '–ë–µ–∑ –¥–æ–±–∞–≤–æ–∫'),
            'time': data.get('time'),
            'is_free': order_is_free,
            'username': username,
            'user_id': user_id,
            'first_name': first_name,
            'timestamp': datetime.datetime.now(ZoneInfo("Asia/Yekaterinburg")),
            "total_price": total_price,
            'payment_id': payment_id,
            'status': status,
            'payment_status': 'bonus' if data.get('use_free', False) else ('paid' if payment_id else 'unpaid')
        }
        new_order_record = await postgres_client.add_order(order_db_data)
        if not new_order_record:
            raise Exception("postgres_client.add_order returned None or False")

        order_id = new_order_record['order_id']
        created_at = new_order_record['created_at']

        # 2. –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π, —Å–ø–∏—Å—ã–≤–∞–µ–º –±–æ–Ω—É—Å
        if order_is_free:
            await postgres_client.execute(
                "UPDATE referral_program SET free_coffees = free_coffees - 1 WHERE user_id = $1", user_id)

        # 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ –¥–æ—Å–∫—É –±–∞—Ä–∏—Å—Ç–∞ —á–µ—Ä–µ–∑ WebSocket
        order_payload = {
            "order_id": order_id,
            "type": new_order_record['type'],
            "cup": new_order_record['cup'],
            "time": new_order_record['time'],
            "status": new_order_record.get('status', 'new'),
            "syrup": new_order_record.get('syrup'),
            "croissant": new_order_record.get('croissant'),
            "is_free": new_order_record.get('is_free', False),
            "timestamp": new_order_record['timestamp'].isoformat(),
            "total_price": total_price,
            "created_at": created_at.isoformat(),
            "payment_status": new_order_record.get('payment_status', 'unpaid')
        }
        await ws_manager.broadcast({"type": "new_order", "payload": order_payload})

        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –Ω–∞–≥—Ä–∞–∂–¥–∞–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞, –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑
        referral = await postgres_client.fetchrow(
            "SELECT referrer_id, rewarded FROM referral_links WHERE referred_id=$1", user_id)
        if referral and not referral['rewarded']:
            referrer_id = referral['referrer_id']
            await postgres_client.execute(
                "UPDATE referral_program SET free_coffees = free_coffees + 1, referred_count = referred_count + 1 WHERE user_id=$1",
                referrer_id)
            await postgres_client.execute("UPDATE referral_links SET rewarded = TRUE WHERE referred_id = $1", user_id)
            await bot.send_message(chat_id=referrer_id,
                                   text="üéâ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω –±–æ–Ω—É—Å! –ó–∞ —Ç–æ, —á—Ç–æ –≤–∞—à –¥—Ä—É–≥ —Å–¥–µ–ª–∞–ª –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑, –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –æ–¥–∏–Ω –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–æ—Ñ–µ.")

        # 5. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±–∞—Ä–∏—Å—Ç–µ
        try:
            header = f"‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ ‚Ññ{order_id}</b>"
            client_info = f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> @{username}" if username else f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {first_name}"
            order_details_parts = [
                f"‚òïÔ∏è <b>–ù–∞–ø–∏—Ç–æ–∫:</b> {data.get('type')}", f"üìè <b>–û–±—ä–µ–º:</b> {data.get('cup')} –º–ª",
            ]
            if data.get('syrup') and data.get('syrup') != '–ë–µ–∑ —Å–∏—Ä–æ–ø–∞':
                order_details_parts.insert(1, f"üçØ <b>–°–∏—Ä–æ–ø:</b> {data.get('syrup')}")
            if data.get('croissant') and data.get('croissant') != '–ë–µ–∑ –¥–æ–±–∞–≤–æ–∫':
                order_details_parts.append(f"ü•ê <b>–î–æ–±–∞–≤–∫–∞:</b> {data.get('croissant')}")

            order_details_parts.append(f"‚è±Ô∏è <b>–ë—É–¥–µ—Ç —á–µ—Ä–µ–∑:</b> {data.get('time')} –º–∏–Ω—É—Ç")
            created_time_str = created_at.strftime('%H:%M')
            order_details_parts.append(f"‚è±Ô∏è <b>–°–æ–∑–¥–∞–Ω:</b> {created_time_str}")
            order_details = "\n".join(order_details_parts)

            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø–ª–∞—Ç–µ
            payment_status = new_order_record.get('payment_status')
            if payment_status == 'paid':
                payment_info = f"‚úÖ <b>–û–ü–õ–ê–ß–ï–ù–û –û–ù–õ–ê–ô–ù:</b> {total_price} –¢"
            elif payment_status == 'bonus':
                payment_info = "üéÅ <b>–û–ü–õ–ê–ß–ï–ù–û –ë–û–ù–£–°–û–ú</b>"
            else:  # unpaid
                payment_info = f"üí∞ <b>–ù–ï –û–ü–õ–ê–ß–ï–ù–û (–æ–ø–ª–∞—Ç–∞ –Ω–∞ –º–µ—Å—Ç–µ):</b> {total_price} –¢"
            text_for_barista = f"{header}\n{client_info}\n\n{order_details}\n\n{payment_info}"

            await bot.send_message(chat_id=config.BARISTA_ID, text=text_for_barista, parse_mode="HTML")
        except Exception as e:
            logger.error(f"Failed to send detailed notification to barista for order #{order_id}: {e}")
            await bot.send_message(chat_id=config.BARISTA_ID,
                                   text=f"‚ùóÔ∏è–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ ‚Ññ{order_id}. –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–µ—Ç–∞–ª–∏.")

        return new_order_record

    except Exception as e:
        logger.error(f"Critical error in process_and_save_order for user {user_id}: {e}", exc_info=True)
        return None


# =================================================================
#                       –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# =================================================================

async def build_order_summary(state: FSMContext) -> str:
    data = await state.get_data()
    summary_parts = [f"‚òïÔ∏è –ö–æ—Ñ–µ: {data.get('type')}"]
    syrup, croissant = data.get('syrup'), data.get('croissant')
    if syrup and syrup != "–ë–µ–∑ —Å–∏—Ä–æ–ø–∞":
        summary_parts.append(f"üçØ –°–∏—Ä–æ–ø: {syrup}")
    summary_parts.append(f"üìè –û–±—ä–µ–º: {data.get('cup')} –º–ª")
    if croissant and croissant != "–ë–µ–∑ –¥–æ–±–∞–≤–æ–∫":
        summary_parts.append(f"ü•ê –î–æ–±–∞–≤–∫–∞: {croissant}")
    summary_parts.append(f"‚è±Ô∏è –ü–æ–¥–æ–π–¥–µ—Ç —á–µ—Ä–µ–∑: {data.get('time')} –º–∏–Ω—É—Ç")
    return "\n".join(summary_parts)


async def proceed_to_confirmation(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Order.confirm)
    data = await state.get_data()
    summary_text = await build_order_summary(state)
    total_price = calculate_order_total(data)
    caption_with_price = (
        f"–ü—Ä–æ–≤–µ—Ä—å –≤—Å—ë –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π üëá\n\n{summary_text}\n\nüí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {total_price} –¢\n\n–í—Å—ë –≤–µ—Ä–Ω–æ?")
    user_id = callback.from_user.id
    referral_user = await postgres_client.fetchrow("SELECT free_coffees FROM referral_program WHERE user_id=$1",
                                                   user_id)
    free_coffees = referral_user['free_coffees'] if referral_user else 0
    await state.update_data(
        free_coffees_count=free_coffees,
        last_callback=callback.model_dump(mode='json')
    )
    await callback.message.edit_caption(caption=caption_with_price, reply_markup=get_loyalty_ikb(free_coffees))


async def start_msg(message: Message | CallbackQuery):
    text = (f"""–ü—Ä–∏–≤–µ—Ç üëã! –¢—ã –≤ –±–æ—Ç–µ –∫–æ—Ñ–µ–π–Ω–∏ –ö–æ—Ñ–µ –Ω–∞ —Ö–æ–¥—É.
    –ú—ã –≤–∞—Ä–∏–º –∫–æ—Ñ–µ —Å —Å–æ–±–æ–π –∏ –≤—ã–Ω–æ—Å–∏–º –µ–≥–æ —Ç–µ–±–µ –ø—Ä—è–º–æ –≤ —Ä—É–∫–∏ ‚Äî –±–µ–∑ –æ—á–µ—Ä–µ–¥–µ–π, —à—É–º–∞ –∏ –±–µ–≥–æ—Ç–Ω–∏.
    –ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏ –Ω–∞–ø–∏—Ç–æ–∫, —É–∫–∞–∂–∏ —á–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –ø–æ–¥–æ–π–¥–µ—à—å ‚Äî –∏ –≤—Å—ë –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ –∫ —Ç–≤–æ–µ–º—É –ø—Ä–∏—Ö–æ–¥—É.
    üëá–ù–∞—á–Ω–µ–º?""")
    path = Path(__file__).resolve().parent.parent.parent / "coffee-cup-fixed.jpg"
    photo = FSInputFile(path)
    if isinstance(message, Message):
        await message.answer_photo(photo=photo, caption=text, reply_markup=mainMenu_ikb)
    elif isinstance(message, CallbackQuery):
        await message.message.edit_media(media=InputMediaPhoto(media=photo, caption=text), reply_markup=mainMenu_ikb)


# =================================================================
#                       –û–°–ù–û–í–ù–´–ï –•–≠–ù–î–õ–ï–†–´
# =================================================================

@router.message(CommandStart(deep_link=True))
@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ä—Ç"""
    await state.clear()
    user_id = message.from_user.id
    user = await postgres_client.fetchrow("SELECT * FROM users WHERE telegram_id=$1", user_id)
    if not user:
        await postgres_client.insert("users", {"telegram_id": user_id, "username": message.from_user.username,
                                               "first_name": message.from_user.first_name})
    if message.text and message.text.startswith("/start ref_"):
        try:
            referrer_id = int(message.text.split('_')[1])
            if referrer_id != user_id:
                referral = await postgres_client.fetchrow("SELECT * FROM referral_links WHERE referred_id=$1", user_id)
                if not referral:
                    await postgres_client.insert("referral_links", {"referrer_id": referrer_id, "referred_id": user_id})
        except (ValueError, IndexError):
            pass
    await start_msg(message=message)


@router.callback_query(F.data == "make_order")
async def handle_text_message(callback: CallbackQuery, state: FSMContext):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
    await state.set_state(Order.type)
    await callback.message.edit_caption(caption="–ö–∞–∫–æ–π –∫–æ—Ñ–µ —Ö–æ—á–µ—à—å —Å–µ–≥–æ–¥–Ω—è? (–í—ã–±–µ—Ä–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ üëá)",
                                        reply_markup=type_cofe_ikb)


@router.callback_query(F.data == "partners")
async def show_partners_info(callback: CallbackQuery):
    """–ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞"""
    user_id = callback.from_user.id
    referral_user = await postgres_client.fetchrow("SELECT free_coffees FROM referral_program WHERE user_id=$1",
                                                   user_id)
    free_coffees = referral_user['free_coffees'] if referral_user else 0
    if not referral_user:
        await postgres_client.insert("referral_program", {"user_id": user_id})
    bot_info = await callback.bot.get_me()
    referral_link = f"https://t.me/{bot_info.username}?start=ref_{user_id}"
    text = (
        f"**–¢–≤–æ–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–æ—Ñ–µ –∂–¥—ë—Ç!** ‚ú®\n\n–ó–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–¥—ë—Ç –ø–æ —Ç–≤–æ–µ–π —Å—Å—ã–ª–∫–µ –∏ —Å–¥–µ–ª–∞–µ—Ç –∑–∞–∫–∞–∑, —Ç—ã –ø–æ–ª—É—á–∏—à—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–æ—Ñ–µ.\n –°–µ–π—á–∞—Å —É —Ç–µ–±—è **{free_coffees}** –±–æ–Ω—É—Å–æ–≤.\n\n–ü–æ–¥–µ–ª–∏—Å—å —Å–≤–æ–µ–π —Å—Å—ã–ª–∫–æ–π:\n{referral_link}")
    await callback.message.edit_caption(caption=text, reply_markup=partners_ikb)


@router.callback_query(F.data == "main_menu")
async def back_to_main_menu(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await state.clear()
    await start_msg(message=callback)


# =================================================================
#                       –®–ê–ì–ò –ó–ê–ö–ê–ó–ê (FSM)
# =================================================================

@router.callback_query(Order.type)
async def order_type(callback: CallbackQuery, state: FSMContext):
    choice = callback.data
    if choice == "type_cancel":
        await state.clear()
        await callback.message.delete()
        await start_msg(message=callback.message)
        return
    await state.update_data(type=choice)
    if choice in ["–ê–º–µ—Ä–∏–∫–∞–Ω–æ", "–ö–∞–ø—É—á–∏–Ω–æ", "–õ–∞—Ç–µ"]:
        await state.set_state(Order.syrup)
        await callback.message.edit_caption(caption="–î–æ–±–∞–≤–∏—Ç—å —Å–∏—Ä–æ–ø?", reply_markup=syrup_choice_ikb)
    else:
        await state.update_data(syrup="–ë–µ–∑ —Å–∏—Ä–æ–ø–∞")
        await state.set_state(Order.cup)
        await callback.message.edit_caption(caption="–ö–∞–∫–æ–π –æ–±—ä–µ–º –ø–æ–¥–æ–π–¥–µ—Ç?", reply_markup=cup_cofe_ikb)


@router.callback_query(Order.syrup)
async def order_syrup(callback: CallbackQuery, state: FSMContext):
    choice = callback.data
    if choice == "syrup_back":
        await state.set_state(Order.type)
        await callback.message.edit_caption(caption="–ö–∞–∫–æ–π –∫–æ—Ñ–µ —Ö–æ—á–µ—à—å —Å–µ–≥–æ–¥–Ω—è? (–í—ã–±–µ—Ä–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ üëá)",
                                            reply_markup=type_cofe_ikb)
        return
    syrup_map = {"syrup_caramel": "–ö–∞—Ä–∞–º–µ–ª—å–Ω—ã–π", "syrup_vanilla": "–í–∞–Ω–∏–ª—å–Ω—ã–π", "syrup_hazelnut": "–û—Ä–µ—Ö–æ–≤—ã–π",
                 "syrup_skip": "–ë–µ–∑ —Å–∏—Ä–æ–ø–∞"}
    await state.update_data(syrup=syrup_map.get(choice, "–ë–µ–∑ —Å–∏—Ä–æ–ø–∞"))
    await state.set_state(Order.cup)
    await callback.message.edit_caption(caption="–ö–∞–∫–æ–π –æ–±—ä–µ–º –ø–æ–¥–æ–π–¥–µ—Ç?", reply_markup=cup_cofe_ikb)


@router.callback_query(Order.cup)
async def order_cup(callback: CallbackQuery, state: FSMContext):
    choice = callback.data
    if choice == "cup_back":
        data = await state.get_data()
        if data.get('type') in ["–ê–º–µ—Ä–∏–∫–∞–Ω–æ", "–ö–∞–ø—É—á–∏–Ω–æ", "–õ–∞—Ç–µ"]:
            await state.set_state(Order.syrup)
            await callback.message.edit_caption(caption="–î–æ–±–∞–≤–∏—Ç—å —Å–∏—Ä–æ–ø?", reply_markup=syrup_choice_ikb)
        else:
            await state.set_state(Order.type)
            await callback.message.edit_caption(caption="–ö–∞–∫–æ–π –∫–æ—Ñ–µ —Ö–æ—á–µ—à—å —Å–µ–≥–æ–¥–Ω—è? (–í—ã–±–µ—Ä–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ üëá)",
                                                reply_markup=type_cofe_ikb)
        return
    await state.update_data(cup=choice)
    await state.set_state(Order.time)
    await callback.message.edit_caption(caption="–ß–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –ø–æ–¥–æ–π–¥–µ—à—å –∑–∞ –∫–æ—Ñ–µ?", reply_markup=time_cofe_ikb)


@router.callback_query(Order.time)
async def order_time(callback: CallbackQuery, state: FSMContext):
    choice = callback.data
    if choice == "time_back":
        await state.set_state(Order.cup)
        await callback.message.edit_caption(caption="–í—ã–±–µ—Ä–∏ –æ–±—ä–µ–º –∑–∞–Ω–æ–≤–æ üëá", reply_markup=cup_cofe_ikb)
        return
    await state.update_data(time=choice)
    await state.set_state(Order.croissant)
    await callback.message.edit_caption(caption="–û—Ç–ª–∏—á–Ω–æ! –•–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –∫ –∫–æ—Ñ–µ —Å–≤–µ–∂–∏–π –∫—Ä—É–∞—Å—Å–∞–Ω?",
                                        reply_markup=addon_offer_ikb)


@router.callback_query(Order.croissant)
async def order_addon(callback: CallbackQuery, state: FSMContext):
    choice = callback.data
    if choice == "add_croissant":
        await callback.message.edit_caption(caption="–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –∫—Ä—É–∞—Å—Å–∞–Ω:", reply_markup=croissant_choice_ikb)
        return
    if choice == "addon_back":
        await callback.message.edit_caption(caption="–û—Ç–ª–∏—á–Ω–æ! –•–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –∫ –∫–æ—Ñ–µ —Å–≤–µ–∂–∏–π –∫—Ä—É–∞—Å—Å–∞–Ω?",
                                            reply_markup=addon_offer_ikb)
        return
    if choice.startswith("croissant_"):
        croissant_map = {"croissant_classic": "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π", "croissant_chocolate": "–®–æ–∫–æ–ª–∞–¥–Ω—ã–π",
                         "croissant_almond": "–ú–∏–Ω–¥–∞–ª—å–Ω—ã–π"}
        await state.update_data(croissant=croissant_map.get(choice))
        await proceed_to_confirmation(callback, state)
        return
    if choice == "checkout":
        await state.update_data(croissant="–ë–µ–∑ –¥–æ–±–∞–≤–æ–∫")
        await proceed_to_confirmation(callback, state)
        return


# =================================================================
#      –®–ê–ì 6: –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –ó–ê–ö–ê–ó–ê –ò –û–ü–õ–ê–¢–ê
# =================================================================

@router.callback_query(Order.confirm, F.data == "create_order")
async def confirm_create_order(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –ë–ï–ó –û–ü–õ–ê–¢–´ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–∞ –±–æ–Ω—É—Å—ã).
    """
    await callback.answer("‚è≥ –ú–∏–Ω—É—Ç–æ—á–∫—É, –æ—Ñ–æ—Ä–º–ª—è–µ–º –≤–∞—à –∑–∞–∫–∞–∑...", show_alert=False)
    await callback.message.edit_reply_markup(reply_markup=None)

    # <-- –ò–ó–ú–ï–ù–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –ø–µ—Ä–µ–¥–∞–µ–º –≤ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    order_data = await state.get_data()
    order_record = await process_and_save_order(
        order_data=order_data,
        user_id=callback.from_user.id,
        username=callback.from_user.username,
        first_name=callback.from_user.first_name,
        bot=callback.bot
    )

    if order_record:
        order_id = order_record['order_id']
        total_price = order_record['total_price']
        await state.set_state(Order.ready)
        await state.update_data(last_order_id=order_id)
        caption_text = (f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ ‚Ññ{order_id} –Ω–∞ —Å—É–º–º—É {total_price} –¢ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n"
                        f"–ö–æ–≥–¥–∞ –±—É–¥–µ—à—å —É –≤—Ö–æ–¥–∞ ‚Äî –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –∏ –º—ã –≤—ã–Ω–µ—Å–µ–º –Ω–∞–ø–∏—Ç–æ–∫ üëá")
        if order_record['is_free']:
            caption_text = (f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ ‚Ññ{order_id} –æ—Ñ–æ—Ä–º–ª–µ–Ω (–æ–ø–ª–∞—á–µ–Ω–æ –±–æ–Ω—É—Å–æ–º)!\n"
                            f"–ö–æ–≥–¥–∞ –±—É–¥–µ—à—å —É –≤—Ö–æ–¥–∞ ‚Äî –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –∏ –º—ã –≤—ã–Ω–µ—Å–µ–º –Ω–∞–ø–∏—Ç–æ–∫ üëá")
        await callback.message.edit_caption(caption=caption_text, reply_markup=ready_cofe_ikb)
    else:
        data = await state.get_data()
        free_coffees = data.get('free_coffees_count', 0)
        await callback.message.edit_caption(
            caption="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –µ–≥–æ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_loyalty_ikb(free_coffees)
        )


@router.callback_query(Order.confirm, F.data == "pay_order")
async def pay_order_handler(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–û–ø–ª–∞—Ç–∏—Ç—å".
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ –≤ —Ç–∞–±–ª–∏—Ü—É payments –∏ –∏–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –æ–ø–ª–∞—Ç—É.
    """
    user_id = callback.from_user.id
    order_data = await state.get_data()
    amount = calculate_order_total(order_data)

    summary_parts = [f"–ö–æ—Ñ–µ: {order_data.get('type')}"]
    if order_data.get('syrup') and order_data.get('syrup') != '–ë–µ–∑ —Å–∏—Ä–æ–ø–∞': summary_parts.append(
        f"–°–∏—Ä–æ–ø: {order_data.get('syrup')}")
    if order_data.get('croissant') and order_data.get('croissant') != '–ë–µ–∑ –¥–æ–±–∞–≤–æ–∫': summary_parts.append(
        f"–î–æ–±–∞–≤–∫–∞: {order_data.get('croissant')}")
    description = f"–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: {', '.join(summary_parts)}"

    await callback.answer("‚è≥ –°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É...")
    payment_id = str(int(time.time() * 1000))

    try:
        await postgres_client.insert("payments", {
            "payment_id": payment_id, "user_id": user_id, "amount": amount,
            "description": description,
            "order_data": json.dumps(order_data, ensure_ascii=False)
        })
        logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å –æ –ø–ª–∞—Ç–µ–∂–µ #{payment_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–∫–∞–∑–∞.")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –æ –ø–ª–∞—Ç–µ–∂–µ –¥–ª—è {user_id}: {e}", exc_info=True)
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    payment_url = await epay_service.create_invoice(
        amount=amount, payment_id=payment_id, description=description, bot=callback.bot
    )

    if payment_url:
        payment_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=f"–û–ø–ª–∞—Ç–∏—Ç—å {amount} KZT", url=payment_url)]
        ])
        await callback.message.answer(
            f"–í–∞—à —Å—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É –≥–æ—Ç–æ–≤.", reply_markup=payment_keyboard
        )
    else:
        await postgres_client.update("payments", {"status": "error"}, "payment_id = $1", [payment_id])
        await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.callback_query(Order.confirm, F.data == "use_free_coffee")
async def confirm_use_free_coffee(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ–Ω—É—Å–Ω–æ–≥–æ –∫–æ—Ñ–µ –Ω–∞ —à–∞–≥–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.

        –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç –∫–Ω–æ–ø–∫—É '–°–ø–∏—Å–∞—Ç—å
        –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–æ—Ñ–µ'. –û–Ω–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –±–æ–Ω—É—Å–Ω—ã—Ö –∫–æ—Ñ–µ
        –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.

        –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –±–æ–Ω—É—Å—ã:
        1.  –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–ª–∞–≥ 'use_free' –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ FSM. –≠—Ç–æ—Ç —Ñ–ª–∞–≥ –±—É–¥–µ—Ç
            –∫–ª—é—á–µ–≤—ã–º –ø—Ä–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞, —á—Ç–æ–±—ã –Ω–µ —Ç—Ä–µ–±–æ–≤–∞—Ç—å –æ–ø–ª–∞—Ç—É
            –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–ø–∏—Å–∞—Ç—å –±–æ–Ω—É—Å.
        2.  –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É—è, —á—Ç–æ –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º.
        3.  –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –æ—Ç–æ–±—Ä–∞–∂–∞—è —É–º–µ–Ω—å—à–µ–Ω–Ω–æ–µ –Ω–∞ –µ–¥–∏–Ω–∏—Ü—É
            –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤.

        –ï—Å–ª–∏ –±–æ–Ω—É—Å–æ–≤ –Ω–µ—Ç, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ.

        Args:
            callback (CallbackQuery): –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞ –æ—Ç Telegram.
            state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞.
        """
    user_id = callback.from_user.id
    referral_user = await postgres_client.fetchrow("SELECT free_coffees FROM referral_program WHERE user_id=$1",
                                                   user_id)
    free_coffees = referral_user['free_coffees'] if referral_user else 0

    if free_coffees > 0:
        await callback.answer("‚úÖ –ë–æ–Ω—É—Å –ø—Ä–∏–º–µ–Ω–µ–Ω!", show_alert=False)
        await state.update_data(use_free=True)
        summary_text = await build_order_summary(state)
        await callback.message.edit_caption(
            caption=f"‚úÖ –ö–æ—Ñ–µ –±—É–¥–µ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º!\n\n{summary_text}\n\n–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑.",
            reply_markup=get_loyalty_ikb(free_coffees - 1)
        )
    else:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∫–æ—Ñ–µ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è.", show_alert=True)


@router.callback_query(Order.confirm, F.data == "loyal_program")
async def confirm_back_to_type(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Order.type)
    await callback.message.edit_caption(caption="–û–∫–µ–π, –≤—ã–±–µ—Ä–∏ –∫–æ—Ñ–µ –∑–∞–Ω–æ–≤–æ üëá", reply_markup=type_cofe_ikb)


# =================================================================
#                       –®–ê–ì 7: –ö–õ–ò–ï–ù–¢ –ü–û–î–û–®–ï–õ
# =================================================================

@router.callback_query(Order.ready, F.data == "cancel_order")
async def cancel_order_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É –∑–∞–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤ —Ç–µ—á–µ–Ω–∏–µ 3 –º–∏–Ω—É—Ç.

        –§—É–Ω–∫—Ü–∏—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ 'Order.ready' –Ω–∞–∂–∏–º–∞–µ—Ç
        –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã. –û–Ω–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ –∏—Å—Ç–µ–∫–ª–æ –ª–∏ 3-–º–∏–Ω—É—Ç–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –æ—Ç–º–µ–Ω—ã
        —Å –º–æ–º–µ–Ω—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞.

        –ö–ª—é—á–µ–≤–∞—è –ª–æ–≥–∏–∫–∞ –≤–∫–ª—é—á–∞–µ—Ç:
        1.  **–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏:** –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ (—Ö—Ä–∞–Ω—è—â–µ–µ—Å—è –≤ –ë–î
            —Å —á–∞—Å–æ–≤—ã–º –ø–æ—è—Å–æ–º) —Å —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º, —Ç–∞–∫–∂–µ –≤–∑—è—Ç—ã–º —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ
            –ø–æ—è—Å–∞ ('Asia/Yekaterinburg'), —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫. –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ
            –±–æ–ª–µ–µ 180 —Å–µ–∫—É–Ω–¥, –æ—Ç–º–µ–Ω–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞, –∏ –∫–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã —É–¥–∞–ª—è–µ—Ç—Å—è.
        2.  **–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞:** –ú–µ–Ω—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ `orders` –Ω–∞ 'cancelled'.
        3.  **–í–æ–∑–≤—Ä–∞—Ç –±–æ–Ω—É—Å–æ–≤:** –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –±—ã–ª –æ–ø–ª–∞—á–µ–Ω —Å –ø–æ–º–æ—â—å—é –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ
            –∫–æ—Ñ–µ (is_free = True), –±–æ–Ω—É—Å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –Ω–∞ —Å—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        4.  **–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤:** –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç WebSocket-—Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –¥–æ—Å–∫—É
            –±–∞—Ä–∏—Å—Ç–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.
        5.  **–û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è:** –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–º–µ–Ω–µ
            –∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ—Ç –µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM, –∑–∞–≤–µ—Ä—à–∞—è —Å–µ—Å—Å–∏—é –∑–∞–∫–∞–∑–∞.

        Args:
            callback (CallbackQuery): –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞ –æ—Ç Telegram.
            state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM, —Ö—Ä–∞–Ω—è—â–∏–π ID —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–∫–∞–∑–∞.
        """
    try:
        data = await state.get_data()
        order_id = data.get('last_order_id')
        if not order_id:
            await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞.", show_alert=True)
            return

        order_record = await postgres_client.fetchrow("SELECT timestamp FROM orders WHERE order_id = $1", order_id)
        if not order_record:
            await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.", show_alert=True)
            return

        # ----- –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º –¥–ª—è Asia/Yekaterinburg -----
        time_created = order_record['timestamp']  # –≠—Ç–æ –æ–±—ä–µ–∫—Ç datetime —Å —Ç–≤–æ–µ–π —Ç–∞–π–º–∑–æ–Ω–æ–π

        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º, —Ç–æ–∂–µ –≤–∑—è—Ç—ã–º –≤ —Ç–≤–æ–µ–π —Ç–∞–π–º–∑–æ–Ω–µ
        if (datetime.datetime.now(ZoneInfo("Asia/Yekaterinburg")) - time_created).total_seconds() > 180:
            await callback.answer("‚ùå –ü—Ä–æ—à–ª–æ –±–æ–ª–µ–µ 3 –º–∏–Ω—É—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ —É–∂–µ –Ω–µ–ª—å–∑—è.", show_alert=True)
            await callback.message.edit_reply_markup(reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üö∂‚Äç‚ôÇÔ∏è –Ø –ø–æ–¥–æ—à–µ–ª(–ª–∞)", callback_data="client_arrived")]
            ]))
            return
        # ----- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø -----

        await callback.answer("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—è–µ—Ç—Å—è...")

        order_to_cancel = await postgres_client.fetchrow("SELECT is_free FROM orders WHERE order_id = $1", order_id)

        await postgres_client.update(table="orders", data={"status": "cancelled"}, where="order_id = $1",
                                     params=[order_id])
        logger.info(f"Order #{order_id} was cancelled by user.")

        if order_to_cancel and order_to_cancel['is_free']:
            await postgres_client.execute(
                "UPDATE referral_program SET free_coffees = free_coffees + 1 WHERE user_id = $1",
                callback.from_user.id)
            logger.info(f"Returned 1 free coffee to user {callback.from_user.id} for cancelled order #{order_id}")

        await ws_manager.broadcast(
            {"type": "status_update", "payload": {"order_id": order_id, "new_status": "cancelled"}})
        await callback.message.edit_caption(caption="‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω.", reply_markup=None)
        await state.clear()

    except Exception as e:
        logger.error(f"Error in cancel_order_handler for user {callback.from_user.id}: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞.", show_alert=True)


@router.callback_query(Order.ready, F.data == "client_arrived")
async def order_ready(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ "–Ø –ø–æ–¥–æ—à–µ–ª(–ª–∞)", –±–µ—Ä–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î –∏ —à–ª–µ—Ç –±–∞—Ä–∏—Å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.
    """
    try:
        data = await state.get_data()
        order_id = data.get('last_order_id')
        if not order_id:
            await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞.", show_alert=True)
            await callback.message.delete()
            await start_msg(callback.message)
            return

        await callback.answer("–û—Ç–ª–∏—á–Ω–æ, –±–∞—Ä–∏—Å—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω!", show_alert=False)

        # ----- –í–û–¢ –ì–õ–ê–í–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï -----
        # 1. –ü–æ–ª—É—á–∞–µ–º –ê–ö–¢–£–ê–õ–¨–ù–´–ï –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        order_record = await postgres_client.fetchrow("SELECT * FROM orders WHERE order_id = $1", order_id)
        if not order_record:
            logger.warning(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –Ω–∞–∂–∞–ª '–Ø –ø–æ–¥–æ—à–µ–ª', –Ω–æ –∑–∞–∫–∞–∑ #{order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î.")
            await callback.message.delete()
            await start_msg(callback.message)
            return

        # 2. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
        await postgres_client.update(table="orders", data={"status": "arrived"}, where="order_id = $1",
                                     params=[order_id])
        logger.info(f"Order #{order_id} status changed to 'arrived'.")

        # 3. –£–≤–µ–¥–æ–º–ª—è–µ–º WebSocket
        await ws_manager.broadcast(
            {"type": "status_update", "payload": {"order_id": order_id, "new_status": "arrived"}})

        # 4. –§–æ—Ä–º–∏—Ä—É–µ–º –ü–†–ê–í–ò–õ–¨–ù–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –±–∞—Ä–∏—Å—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î
        order_details_parts = [
            f"‚òïÔ∏è –ù–∞–ø–∏—Ç–æ–∫: {order_record.get('type')}",
            f"üìè –û–±—ä–µ–º: {order_record.get('cup')} –º–ª",
        ]
        if order_record.get('syrup') and order_record.get('syrup') != '–ë–µ–∑ —Å–∏—Ä–æ–ø–∞':
            order_details_parts.insert(1, f"üçØ –°–∏—Ä–æ–ø: {order_record.get('syrup')}")
        if order_record.get('croissant') and order_record.get('croissant') != '–ë–µ–∑ –¥–æ–±–∞–≤–æ–∫':
            order_details_parts.append(f"ü•ê –î–æ–±–∞–≤–∫–∞: {order_record.get('croissant')}")

        order_details = "\n".join(order_details_parts)

        payment_status = order_record.get('payment_status')
        total_price = order_record.get('total_price')

        if payment_status == 'paid':
            payment_info = f"‚úÖ <b>–û–ü–õ–ê–ß–ï–ù–û –û–ù–õ–ê–ô–ù</b>"
        elif payment_status == 'bonus':
            payment_info = "üéÅ <b>–û–ü–õ–ê–ß–ï–ù–û –ë–û–ù–£–°–û–ú</b>"
        else:  # unpaid
            payment_info = f"üí∞ <b>–û–ü–õ–ê–¢–ê –ù–ê –ú–ï–°–¢–ï: {total_price} –¢</b>"

        text_for_admin = (f"üö∂‚Äç‚ôÇÔ∏è <b>–ö–ª–∏–µ–Ω—Ç –ø–æ–¥–æ—à–µ–ª!</b> (–ó–∞–∫–∞–∑ ‚Ññ{order_id})\n"
                          f"@{callback.from_user.username}\n\n"
                          f"{order_details}\n\n"
                          f"{payment_info}")

        await callback.bot.send_message(config.BARISTA_ID, text_for_admin, parse_mode="HTML")
        # ------------------------------------

        await callback.message.delete()
        await start_msg(callback.message)

    except Exception as e:
        logger.error(f"Error in order_ready for user {callback.from_user.id}: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –Ω–æ –º—ã —É–∂–µ —É–≤–µ–¥–æ–º–∏–ª–∏ –±–∞—Ä–∏—Å—Ç–∞!", show_alert=True)
    finally:
        await state.clear()


# =================================================================
#                       –ü–†–û–ß–ò–ï –•–≠–ù–î–õ–ï–†–´
# =================================================================

@router.callback_query(F.data == "buy_bot")
async def buy_bot_handler(callback: CallbackQuery):
    await callback.answer(text="–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞, –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å –í–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è.", show_alert=True)
    text = f"‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è –ö–ª–∏–µ–Ω—Ç @{callback.from_user.username} —Ö–æ—á–µ—Ç –∫—É–ø–∏—Ç—å –±–æ—Ç–∞. –°–≤—è–∂–∏—Å—å —Å –Ω–∏–º –ù–ï–ú–ï–î–õ–ï–ù–ù–û!!!"
    await callback.bot.send_message(chat_id=config.ADMIN_CHAT_ID, text=text)


# <-- –ò–ó–ú–ï–ù–ï–ù–û: –≠—Ç–æ —Ç–µ–ø–µ—Ä—å —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@router.callback_query(F.data == "test_buy")
async def test_buy_handler(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¢–ï–°–¢–û–í–£–Æ –ø–æ–∫—É–ø–∫—É —á–µ—Ä–µ–∑ –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.
    """
    user_id = callback.from_user.id
    amount = 150  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è —Ç–µ—Å—Ç–∞
    description = f"–¢–µ—Å—Ç–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}"

    await callback.answer("‚è≥ –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Å—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É...")

    payment_id = str(int(time.time() * 1000))

    try:
        # –î–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞ –º–æ–∂–Ω–æ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ –≤ order_data
        await postgres_client.insert("payments", {
            "payment_id": payment_id, "user_id": user_id, "amount": amount, "description": description
        })
        logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å –æ —Ç–µ—Å—Ç–æ–≤–æ–º –ø–ª–∞—Ç–µ–∂–µ #{payment_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –æ —Ç–µ—Å—Ç–æ–≤–æ–º –ø–ª–∞—Ç–µ–∂–µ –¥–ª—è {user_id}: {e}", exc_info=True)
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    payment_url = await epay_service.create_invoice(
        amount=amount, payment_id=payment_id, description=description, bot=callback.bot
    )

    if payment_url:
        payment_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=f"–û–ø–ª–∞—Ç–∏—Ç—å {amount} KZT", url=payment_url)]
        ])
        await callback.message.answer(
            f"–í–∞—à —Ç–µ—Å—Ç–æ–≤—ã–π —Å—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É –≥–æ—Ç–æ–≤.", reply_markup=payment_keyboard
        )
    else:
        await postgres_client.update("payments", {"status": "error"}, "payment_id = $1", [payment_id])
        await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
