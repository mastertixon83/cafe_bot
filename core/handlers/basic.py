from aiogram import F, Router
from aiogram.types import Message, CallbackQuery, FSInputFile, InputMediaPhoto, InlineKeyboardMarkup, \
    InlineKeyboardButton
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from pathlib import Path
import datetime
from loguru import logger

# --- –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
from core.utils.states import Order
from core.keyboards.inline.inline_menu import (
    mainMenu_ikb, type_cofe_ikb, cup_cofe_ikb, time_cofe_ikb, ready_cofe_ikb,
    get_loyalty_ikb, partners_ikb, syrup_choice_ikb, addon_offer_ikb,
    croissant_choice_ikb
)
from core.utils.database import postgres_client
from config import config
from core.webapp.ws.orders_ws import manager as ws_manager

router = Router()

# --- 1. –ü–†–ê–ô–°-–õ–ò–°–¢ ---
PRICES = {
    "coffee": {
        "–≠—Å–ø—Ä–µ—Å—Å–æ": {"250": 800, "330": 800, "430": 800},
        "–ê–º–µ—Ä–∏–∫–∞–Ω–æ": {"250": 900, "330": 1100, "430": 1300},
        "–ö–∞–ø—É—á–∏–Ω–æ": {"250": 1200, "330": 1400, "430": 1600},
        "–õ–∞—Ç–µ": {"250": 1200, "330": 1400, "430": 1600},
    },
    "syrup": 300,
    "croissant": 700
}


# --- 2. –§–£–ù–ö–¶–ò–Ø –ü–û–î–°–ß–ï–¢–ê –°–¢–û–ò–ú–û–°–¢–ò ---
def calculate_order_total(order_data: dict) -> int:
    total_price = 0
    coffee_type, cup_size = order_data.get('type'), order_data.get('cup')
    syrup, croissant = order_data.get('syrup'), order_data.get('croissant')
    if coffee_type and cup_size:
        total_price += PRICES.get("coffee", {}).get(coffee_type, {}).get(cup_size, 0)
    if syrup and syrup != "–ë–µ–∑ —Å–∏—Ä–æ–ø–∞":
        total_price += PRICES.get("syrup", 0)
    if croissant and croissant != "–ë–µ–∑ –¥–æ–±–∞–≤–æ–∫":
        total_price += PRICES.get("croissant", 0)
    return total_price


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
async def build_order_summary(state: FSMContext) -> str:
    data = await state.get_data()
    summary_parts = [f"‚òïÔ∏è –ö–æ—Ñ–µ: {data.get('type')}"]
    syrup, croissant = data.get('syrup'), data.get('croissant')
    if syrup and syrup != "–ë–µ–∑ —Å–∏—Ä–æ–ø–∞":
        summary_parts.append(f"üçØ –°–∏—Ä–æ–ø: {syrup}")
    summary_parts.append(f"üìè –û–±—ä–µ–º: {data.get('cup')} –º–ª")
    if croissant and croissant != "–ë–µ–∑ –¥–æ–±–∞–≤–æ–∫":
        summary_parts.append(f"ü•ê –î–æ–±–∞–≤–∫–∞: {croissant}")
    summary_parts.append(f"‚è±Ô∏è –ü–æ–¥–æ–π–¥–µ—Ç —á–µ—Ä–µ–∑: {data.get('time')} –º–∏–Ω—É—Ç")
    return "\n".join(summary_parts)


async def proceed_to_confirmation(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Order.confirm)
    data = await state.get_data()
    summary_text = await build_order_summary(state)
    total_price = calculate_order_total(data)
    caption_with_price = (
        f"–ü—Ä–æ–≤–µ—Ä—å –≤—Å—ë –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π üëá\n\n{summary_text}\n\nüí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {total_price} –¢\n\n–í—Å—ë –≤–µ—Ä–Ω–æ?")
    user_id = callback.from_user.id
    referral_user = await postgres_client.fetchrow("SELECT free_coffees FROM referral_program WHERE user_id=$1",
                                                   user_id)
    free_coffees = referral_user['free_coffees'] if referral_user else 0
    await callback.message.edit_caption(caption=caption_with_price, reply_markup=get_loyalty_ikb(free_coffees))


async def start_msg(message: Message | CallbackQuery):
    text = (f"""–ü—Ä–∏–≤–µ—Ç üëã! –¢—ã –≤ –±–æ—Ç–µ –∫–æ—Ñ–µ–π–Ω–∏ –ö–æ—Ñ–µ –Ω–∞ —Ö–æ–¥—É.
    –ú—ã –≤–∞—Ä–∏–º –∫–æ—Ñ–µ —Å —Å–æ–±–æ–π –∏ –≤—ã–Ω–æ—Å–∏–º –µ–≥–æ —Ç–µ–±–µ –ø—Ä—è–º–æ –≤ —Ä—É–∫–∏ ‚Äî –±–µ–∑ –æ—á–µ—Ä–µ–¥–µ–π, —à—É–º–∞ –∏ –±–µ–≥–æ—Ç–Ω–∏.
    –ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏ –Ω–∞–ø–∏—Ç–æ–∫, —É–∫–∞–∂–∏ —á–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –ø–æ–¥–æ–π–¥–µ—à—å ‚Äî –∏ –≤—Å—ë –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ –∫ —Ç–≤–æ–µ–º—É –ø—Ä–∏—Ö–æ–¥—É.
    üëá–ù–∞—á–Ω–µ–º?""")
    path = Path(__file__).resolve().parent.parent.parent / "coffee-cup-fixed.jpg"
    photo = FSInputFile(path)
    if isinstance(message, Message):
        await message.answer_photo(photo=photo, caption=text, reply_markup=mainMenu_ikb)
    elif isinstance(message, CallbackQuery):
        await message.message.edit_media(media=InputMediaPhoto(media=photo, caption=text), reply_markup=mainMenu_ikb)


# --- /start ---
@router.message(CommandStart(deep_link=True))
@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    user_id = message.from_user.id
    user = await postgres_client.fetchrow("SELECT * FROM users WHERE telegram_id=$1", user_id)
    if not user:
        await postgres_client.insert("users", {"telegram_id": user_id, "username": message.from_user.username,
                                               "first_name": message.from_user.first_name})
    if message.text and message.text.startswith("/start ref_"):
        try:
            referrer_id = int(message.text.split('_')[1])
            if referrer_id != user_id:
                referral = await postgres_client.fetchrow("SELECT * FROM referral_links WHERE referred_id=$1", user_id)
                if not referral:
                    await postgres_client.insert("referral_links", {"referrer_id": referrer_id, "referred_id": user_id})
        except (ValueError, IndexError):
            pass
    await start_msg(message=message)


# --- –û—Å–Ω–æ–≤–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã –º–µ–Ω—é ---
@router.callback_query(F.data == "make_order")
async def handle_text_message(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Order.type)
    await callback.message.edit_caption(caption="–ö–∞–∫–æ–π –∫–æ—Ñ–µ —Ö–æ—á–µ—à—å —Å–µ–≥–æ–¥–Ω—è? (–í—ã–±–µ—Ä–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ üëá)",
                                        reply_markup=type_cofe_ikb)


@router.callback_query(F.data == "partners")
async def show_partners_info(callback: CallbackQuery):
    user_id = callback.from_user.id
    referral_user = await postgres_client.fetchrow("SELECT free_coffees FROM referral_program WHERE user_id=$1",
                                                   user_id)
    free_coffees = referral_user['free_coffees'] if referral_user else 0
    if not referral_user:
        await postgres_client.insert("referral_program", {"user_id": user_id})
    bot_info = await callback.bot.get_me()
    referral_link = f"https://t.me/{bot_info.username}?start=ref_{user_id}"
    text = (
        f"**–¢–≤–æ–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–æ—Ñ–µ –∂–¥—ë—Ç!** ‚ú®\n\n–ó–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–¥—ë—Ç –ø–æ —Ç–≤–æ–µ–π —Å—Å—ã–ª–∫–µ –∏ —Å–¥–µ–ª–∞–µ—Ç –∑–∞–∫–∞–∑, —Ç—ã –ø–æ–ª—É—á–∏—à—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–æ—Ñ–µ.\n –°–µ–π—á–∞—Å —É —Ç–µ–±—è **{free_coffees}** –±–æ–Ω—É—Å–æ–≤.\n\n–ü–æ–¥–µ–ª–∏—Å—å —Å–≤–æ–µ–π —Å—Å—ã–ª–∫–æ–π:\n{referral_link}")
    await callback.message.edit_caption(caption=text, reply_markup=partners_ikb)


@router.callback_query(F.data == "main_menu")
async def back_to_main_menu(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await start_msg(message=callback)


# --- –®–∞–≥–∏ –∑–∞–∫–∞–∑–∞ (1-5) ---
@router.callback_query(Order.type)
async def order_type(callback: CallbackQuery, state: FSMContext):
    choice = callback.data
    if choice == "type_cancel":
        await state.clear()
        await callback.message.delete()
        await start_msg(message=callback.message)
        return
    await state.update_data(type=choice)
    if choice in ["–ê–º–µ—Ä–∏–∫–∞–Ω–æ", "–ö–∞–ø—É—á–∏–Ω–æ", "–õ–∞—Ç–µ"]:
        await state.set_state(Order.syrup)
        await callback.message.edit_caption(caption="–î–æ–±–∞–≤–∏—Ç—å —Å–∏—Ä–æ–ø?", reply_markup=syrup_choice_ikb)
    else:
        await state.update_data(syrup="–ë–µ–∑ —Å–∏—Ä–æ–ø–∞")
        await state.set_state(Order.cup)
        await callback.message.edit_caption(caption="–ö–∞–∫–æ–π –æ–±—ä–µ–º –ø–æ–¥–æ–π–¥–µ—Ç?", reply_markup=cup_cofe_ikb)


@router.callback_query(Order.syrup)
async def order_syrup(callback: CallbackQuery, state: FSMContext):
    choice = callback.data
    if choice == "syrup_back":
        await state.set_state(Order.type)
        await callback.message.edit_caption(caption="–ö–∞–∫–æ–π –∫–æ—Ñ–µ —Ö–æ—á–µ—à—å —Å–µ–≥–æ–¥–Ω—è? (–í—ã–±–µ—Ä–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ üëá)",
                                            reply_markup=type_cofe_ikb)
        return
    syrup_map = {"syrup_caramel": "–ö–∞—Ä–∞–º–µ–ª—å–Ω—ã–π", "syrup_vanilla": "–í–∞–Ω–∏–ª—å–Ω—ã–π", "syrup_hazelnut": "–û—Ä–µ—Ö–æ–≤—ã–π",
                 "syrup_skip": "–ë–µ–∑ —Å–∏—Ä–æ–ø–∞"}
    await state.update_data(syrup=syrup_map.get(choice, "–ë–µ–∑ —Å–∏—Ä–æ–ø–∞"))
    await state.set_state(Order.cup)
    await callback.message.edit_caption(caption="–ö–∞–∫–æ–π –æ–±—ä–µ–º –ø–æ–¥–æ–π–¥–µ—Ç?", reply_markup=cup_cofe_ikb)


@router.callback_query(Order.cup)
async def order_cup(callback: CallbackQuery, state: FSMContext):
    choice = callback.data
    if choice == "cup_back":
        data = await state.get_data()
        if data.get('type') in ["–ê–º–µ—Ä–∏–∫–∞–Ω–æ", "–ö–∞–ø—É—á–∏–Ω–æ", "–õ–∞—Ç–µ"]:
            await state.set_state(Order.syrup)
            await callback.message.edit_caption(caption="–î–æ–±–∞–≤–∏—Ç—å —Å–∏—Ä–æ–ø?", reply_markup=syrup_choice_ikb)
        else:
            await state.set_state(Order.type)
            await callback.message.edit_caption(caption="–ö–∞–∫–æ–π –∫–æ—Ñ–µ —Ö–æ—á–µ—à—å —Å–µ–≥–æ–¥–Ω—è? (–í—ã–±–µ—Ä–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ üëá)",
                                                reply_markup=type_cofe_ikb)
        return
    await state.update_data(cup=choice)
    await state.set_state(Order.time)
    await callback.message.edit_caption(caption="–ß–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –ø–æ–¥–æ–π–¥–µ—à—å –∑–∞ –∫–æ—Ñ–µ?", reply_markup=time_cofe_ikb)


@router.callback_query(Order.time)
async def order_time(callback: CallbackQuery, state: FSMContext):
    choice = callback.data
    if choice == "time_back":
        await state.set_state(Order.cup)
        await callback.message.edit_caption(caption="–í—ã–±–µ—Ä–∏ –æ–±—ä–µ–º –∑–∞–Ω–æ–≤–æ üëá", reply_markup=cup_cofe_ikb)
        return
    await state.update_data(time=choice)
    await state.set_state(Order.croissant)
    await callback.message.edit_caption(caption="–û—Ç–ª–∏—á–Ω–æ! –•–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –∫ –∫–æ—Ñ–µ —Å–≤–µ–∂–∏–π –∫—Ä—É–∞—Å—Å–∞–Ω?",
                                        reply_markup=addon_offer_ikb)


@router.callback_query(Order.croissant)
async def order_addon(callback: CallbackQuery, state: FSMContext):
    choice = callback.data
    if choice == "add_croissant":
        await callback.message.edit_caption(caption="–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –∫—Ä—É–∞—Å—Å–∞–Ω:", reply_markup=croissant_choice_ikb)
        return
    if choice == "addon_back":
        await callback.message.edit_caption(caption="–û—Ç–ª–∏—á–Ω–æ! –•–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –∫ –∫–æ—Ñ–µ —Å–≤–µ–∂–∏–π –∫—Ä—É–∞—Å—Å–∞–Ω?",
                                            reply_markup=addon_offer_ikb)
        return
    if choice.startswith("croissant_"):
        croissant_map = {"croissant_classic": "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π", "croissant_chocolate": "–®–æ–∫–æ–ª–∞–¥–Ω—ã–π",
                         "croissant_almond": "–ú–∏–Ω–¥–∞–ª—å–Ω—ã–π"}
        await state.update_data(croissant=croissant_map.get(choice))
        await proceed_to_confirmation(callback, state)
        return
    if choice == "checkout":
        await state.update_data(croissant="–ë–µ–∑ –¥–æ–±–∞–≤–æ–∫")
        await proceed_to_confirmation(callback, state)
        return


# --- –®–∞–≥ 6: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ ---
@router.callback_query(Order.confirm)
async def order_uproove(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    choice = callback.data
    user_id = callback.from_user.id
    if choice == "loyal_program":
        await state.set_state(Order.type)
        await callback.message.edit_caption(caption="–û–∫–µ–π, –≤—ã–±–µ—Ä–∏ –∫–æ—Ñ–µ –∑–∞–Ω–æ–≤–æ üëá", reply_markup=type_cofe_ikb)
        return
    if choice == "use_free_coffee":
        referral_user = await postgres_client.fetchrow("SELECT free_coffees FROM referral_program WHERE user_id=$1",
                                                       user_id)
        if referral_user and referral_user['free_coffees'] > 0:
            await state.update_data(use_free=True)
            summary_text = await build_order_summary(state)
            await callback.message.edit_caption(
                caption=f"‚úÖ –ö–æ—Ñ–µ –±—É–¥–µ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º!\n\n{summary_text}\n\n–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑.",
                reply_markup=get_loyalty_ikb(referral_user['free_coffees'] - 1))
        else:
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∫–æ—Ñ–µ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è.", show_alert=True)
        return
    if choice == "create_order":
        await state.set_state(Order.ready)
        data = await state.get_data()
        order_is_free = data.get('use_free', False)
        total_price = calculate_order_total(data)
        order_db_data = {
            'type': data.get('type'),
            'cup': data.get('cup'),
            'syrup': data.get('syrup', '–ë–µ–∑ —Å–∏—Ä–æ–ø–∞'),
            'croissant': data.get('croissant', '–ë–µ–∑ –¥–æ–±–∞–≤–æ–∫'),
            'time': data.get('time'),
            'is_free': order_is_free, 'username': callback.from_user.username,
            'user_id': user_id,
            'first_name': callback.from_user.first_name,
            'timestamp': datetime.datetime.now()
        }
        new_order_record = await postgres_client.add_order(order_db_data)
        if not new_order_record:
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.", show_alert=True)
            return
        order_id = new_order_record['order_id']
        await state.update_data(last_order_id=order_id)
        if order_is_free:
            caption_text = (f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ ‚Ññ{order_id} –Ω–∞ —Å—É–º–º—É {total_price} –¢ –æ—Ñ–æ—Ä–º–ª–µ–Ω (–æ–ø–ª–∞—á–µ–Ω–æ –±–æ–Ω—É—Å–æ–º)!\n"
                            f"–ö–æ–≥–¥–∞ –±—É–¥–µ—à—å —É –≤—Ö–æ–¥–∞ ‚Äî –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –∏ –º—ã –≤—ã–Ω–µ—Å–µ–º –Ω–∞–ø–∏—Ç–æ–∫ üëá")
            await postgres_client.execute(
                "UPDATE referral_program SET free_coffees = free_coffees - 1 WHERE user_id = $1", user_id)
        else:
            caption_text = (f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ ‚Ññ{order_id} –Ω–∞ —Å—É–º–º—É {total_price} –¢ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n"
                            f"–ö–æ–≥–¥–∞ –±—É–¥–µ—à—å —É –≤—Ö–æ–¥–∞ ‚Äî –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –∏ –º—ã –≤—ã–Ω–µ—Å–µ–º –Ω–∞–ø–∏—Ç–æ–∫ üëá")
        await callback.message.edit_caption(caption=caption_text, reply_markup=ready_cofe_ikb)
        order_payload = {
            "order_id": order_id,
            "type": new_order_record['type'],
            "cup": new_order_record['cup'],
            "time": new_order_record['time'],
            "status": new_order_record.get('status', 'new'),
            "syrup": new_order_record.get('syrup'),
            "croissant": new_order_record.get('croissant'),
            "is_free": new_order_record.get('is_free', False),
            "timestamp": new_order_record['timestamp'].isoformat(),
            "total_price": total_price
        }
        await ws_manager.broadcast({"type": "new_order", "payload": order_payload})
        referral = await postgres_client.fetchrow(
            "SELECT referrer_id, rewarded FROM referral_links WHERE referred_id=$1", user_id)
        if referral and not referral['rewarded']:
            referrer_id = referral['referrer_id']
            await postgres_client.execute(
                "UPDATE referral_program SET free_coffees = free_coffees + 1, referred_count = referred_count + 1 WHERE user_id=$1",
                referrer_id)
            await postgres_client.execute("UPDATE referral_links SET rewarded = TRUE WHERE referred_id = $1", user_id)
            await callback.bot.send_message(chat_id=referrer_id,
                                            text="üéâ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω –±–æ–Ω—É—Å! –ó–∞ —Ç–æ, —á—Ç–æ –≤–∞—à –¥—Ä—É–≥ —Å–¥–µ–ª–∞–ª –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑, –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –æ–¥–∏–Ω –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–æ—Ñ–µ.")


# --- –®–∞–≥ 7: –ö–ª–∏–µ–Ω—Ç –ø–æ–¥–æ—à–µ–ª ---
@router.callback_query(F.data == "cancel_order", Order.ready)
async def cancel_order_handler(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É –∑–∞–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤ —Ç–µ—á–µ–Ω–∏–µ 3 –º–∏–Ω—É—Ç.
    """
    data = await state.get_data()
    order_id = data.get('last_order_id')
    if not order_id:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞.", show_alert=True)
        return

    order_record = await postgres_client.fetchrow("SELECT timestamp FROM orders WHERE order_id = $1", order_id)
    if not order_record:
        await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.", show_alert=True)
        return

    time_created = order_record['timestamp']
    time_now = datetime.datetime.now()
    if time_created.tzinfo:
        time_created = time_created.replace(tzinfo=None)

    if (time_now - time_created).total_seconds() > 180:
        await callback.answer("‚ùå –ü—Ä–æ—à–ª–æ –±–æ–ª–µ–µ 3 –º–∏–Ω—É—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ —É–∂–µ –Ω–µ–ª—å–∑—è.", show_alert=True)
        # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ "–Ø –ø–æ–¥–æ—à–µ–ª"
        await callback.message.edit_reply_markup(reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üö∂‚Äç‚ôÇÔ∏è –Ø –ø–æ–¥–æ—à–µ–ª(–ª–∞)", callback_data="client_arrived")]
        ]))
        return

    await callback.answer("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—è–µ—Ç—Å—è...")
    await postgres_client.update(table="orders", data={"status": "cancelled"}, where="order_id = $1", params=[order_id])
    logger.info(f"Order #{order_id} was cancelled by user.")

    if data.get('use_free', False):
        await postgres_client.execute("UPDATE referral_program SET free_coffees = free_coffees + 1 WHERE user_id = $1",
                                      callback.from_user.id)
        logger.info(f"Returned 1 free coffee to user {callback.from_user.id}")

    await ws_manager.broadcast({"type": "status_update", "payload": {"order_id": order_id, "new_status": "completed"}})

    await callback.message.edit_caption(caption="‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω.", reply_markup=None)

    await state.clear()


@router.callback_query(F.data == "client_arrived", Order.ready)
async def order_ready(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–Ø –ø–æ–¥–æ—à–µ–ª(–ª–∞)"."""
    await callback.message.edit_caption(caption="–û—Ç–ª–∏—á–Ω–æ, —É–∂–µ –Ω–µ—Å–µ–º –≤–∞—à –∑–∞–∫–∞–∑!",
                                        reply_markup=None)
    data = await state.get_data()
    order_id = data.get('last_order_id')
    if not order_id:
        await callback.message.edit_caption(caption="üòï –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–∫–∞–∑–∞.",
                                            reply_markup=None)
        await state.clear()
        return
    await postgres_client.update(table="orders", data={"status": "arrived"}, where="order_id = $1", params=[order_id])
    logger.info(f"Order #{order_id} status changed to 'arrived'.")
    await ws_manager.broadcast({"type": "status_update", "payload": {"order_id": order_id, "new_status": "arrived"}})
    admin_summary = await build_order_summary(state)
    total_price = calculate_order_total(data)
    is_free = data.get('use_free', False)
    text_for_admin = f"üö∂‚Äç‚ôÇÔ∏è –ö–ª–∏–µ–Ω—Ç –ø–æ–¥–æ—à–µ–ª - @{callback.from_user.username} (–ó–∞–∫–∞–∑ ‚Ññ{order_id})\n\n{admin_summary}"
    if is_free:
        text_for_admin += "\n\n(–ó–∞–∫–∞–∑ –±—ã–ª –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º)"
    else:
        text_for_admin += f"\n\nüí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {total_price} –¢"
    await callback.bot.send_message(config.BARISTA_ID, text_for_admin)
    await callback.message.edit_caption(caption=callback.message.caption + "\n\n‚úÖ –ë–∞—Ä–∏—Å—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ!",
                                        reply_markup=None)
    await state.clear()


# --- –ö–Ω–æ–ø–∫–∞ "–•–æ—á—É –ë–æ—Ç–∞" ---
@router.callback_query(F.data == "buy_bot")
async def buy_bot_handler(callback: CallbackQuery):
    await callback.answer(text="–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞, –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å –í–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è.", show_alert=True)
    text = f"‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è –ö–ª–∏–µ–Ω—Ç @{callback.from_user.username} —Ö–æ—á–µ—Ç –∫—É–ø–∏—Ç—å –±–æ—Ç–∞. –°–≤—è–∂–∏—Å—å —Å –Ω–∏–º –ù–ï–ú–ï–î–õ–ï–ù–ù–û!!!"
    await callback.bot.send_message(chat_id=config.ADMIN_CHAT_ID, text=text)
