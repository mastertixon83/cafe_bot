from aiogram import F, Router
from aiogram.types import Message, CallbackQuery, FSInputFile, InputMediaPhoto
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from pathlib import Path
import datetime

from core.utils.states import Order
from core.keyboards.inline.inline_menu import (
    mainMenu_ikb, type_cofe_ikb, cup_cofe_ikb, time_cofe_ikb, ready_cofe_ikb,
    get_loyalty_ikb, partners_ikb
)
from core.utils.database import postgres_client
from core.utils.google_sheets_manager import google_sheets_manager

from config import config

router = Router()


async def start_msg(message):
    text = (f"""–ü—Ä–∏–≤–µ—Ç üëã! –¢—ã –≤ –±–æ—Ç–µ –∫–æ—Ñ–µ–π–Ω–∏ –ö–æ—Ñ–µ –Ω–∞ —Ö–æ–¥—É. 
    –ú—ã –≤–∞—Ä–∏–º –∫–æ—Ñ–µ —Å —Å–æ–±–æ–π –∏ –≤—ã–Ω–æ—Å–∏–º –µ–≥–æ —Ç–µ–±–µ –ø—Ä—è–º–æ –≤ —Ä—É–∫–∏ ‚Äî –±–µ–∑ –æ—á–µ—Ä–µ–¥–µ–π, —à—É–º–∞ –∏ –±–µ–≥–æ—Ç–Ω–∏. 
    –ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏ –Ω–∞–ø–∏—Ç–æ–∫, —É–∫–∞–∂–∏ —á–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –ø–æ–¥–æ–π–¥–µ—à—å ‚Äî –∏ –≤—Å—ë –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ –∫ —Ç–≤–æ–µ–º—É –ø—Ä–∏—Ö–æ–¥—É.
    üëá–ù–∞—á–Ω–µ–º?""")

    path = Path(__file__).resolve().parent.parent.parent / "coffee-cup-fixed.jpg"
    photo = FSInputFile(path)

    await message.answer_photo(
        photo=photo,
        caption=text,
        reply_markup=mainMenu_ikb
    )


# --- /start ---
@router.message(CommandStart(deep_link=True))
@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()

    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î
    user = await postgres_client.fetchrow("SELECT * FROM users WHERE telegram_id=$1", user_id)
    if not user:
        await postgres_client.insert("users", {"telegram_id": user_id, "username": username, "first_name": first_name})

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
    if message.text.startswith("/start ref_"):
        try:
            referrer_id = int(message.text.split('_')[1])
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–µ—Ä–µ—à–µ–ª –ø–æ —Å–≤–æ–µ–π –∂–µ —Å—Å—ã–ª–∫–µ
            if referrer_id != user_id:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ –æ–Ω —É–∂–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω —Ä–∞–Ω–µ–µ
                referral = await postgres_client.fetchrow("SELECT * FROM referral_links WHERE referred_id=$1", user_id)
                if not referral:
                    await postgres_client.insert("referral_links", {"referrer_id": referrer_id, "referred_id": user_id})
        except (ValueError, IndexError):
            pass  # –ï—Å–ª–∏ deep_link –Ω–µ–≤–µ—Ä–Ω—ã–π, –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ–≥–æ

    await start_msg(message=message)


# --- –ù–∞—á–∞–ª–æ –∑–∞–∫–∞–∑–∞ ---
@router.callback_query(F.data == "make_order")
async def handle_text_message(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Order.type)
    await callback.message.edit_caption(
        caption="–ö–∞–∫–æ–π –∫–æ—Ñ–µ —Ö–æ—á–µ—à—å —Å–µ–≥–æ–¥–Ω—è? (–í—ã–±–µ—Ä–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ üëá)",
        reply_markup=type_cofe_ikb
    )


# --- –ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ ---
@router.callback_query(F.data == "partners")
async def show_partners_info(callback: CallbackQuery):
    user_id = callback.from_user.id
    username = callback.from_user.username

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ç–∞–±–ª–∏—Ü–µ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
    referral_user = await postgres_client.fetchrow(
        "SELECT free_coffees FROM referral_program WHERE user_id=$1", user_id
    )

    if not referral_user:
        # –ï—Å–ª–∏ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ —Å 0 –±–æ–Ω—É—Å–æ–≤
        await postgres_client.insert("referral_program", {"user_id": user_id})
        free_coffees = 0
    else:
        free_coffees = referral_user['free_coffees']

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
    bot_info = await callback.bot.get_me()
    referral_link = f"https://t.me/{bot_info.username}?start=ref_{user_id}"

    text = (
        f"""**–¢–≤–æ–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–æ—Ñ–µ –∂–¥—ë—Ç!** ‚ú®\n\n
        –ó–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–¥—ë—Ç –ø–æ —Ç–≤–æ–µ–π —Å—Å—ã–ª–∫–µ –∏ —Å–¥–µ–ª–∞–µ—Ç –∑–∞–∫–∞–∑, —Ç—ã –ø–æ–ª—É—á–∏—à—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–æ—Ñ–µ.\n –°–µ–π—á–∞—Å —É —Ç–µ–±—è **{free_coffees}** –±–æ–Ω—É—Å–æ–≤.\n\n
        –ü–æ–¥–µ–ª–∏—Å—å —Å–≤–æ–µ–π —Å—Å—ã–ª–∫–æ–π:\n{referral_link}"""
    )

    await callback.message.edit_caption(
        caption=text,
        reply_markup=partners_ikb
    )


# --- –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
@router.callback_query(F.data == "main_menu")
async def back_to_main_menu(callback: CallbackQuery):
    text = (f"""–ü—Ä–∏–≤–µ—Ç üëã! –¢—ã –≤ –±–æ—Ç–µ –∫–æ—Ñ–µ–π–Ω–∏ –ö–æ—Ñ–µ –Ω–∞ —Ö–æ–¥—É. 
    –ú—ã –≤–∞—Ä–∏–º –∫–æ—Ñ–µ —Å —Å–æ–±–æ–π –∏ –≤—ã–Ω–æ—Å–∏–º –µ–≥–æ —Ç–µ–±–µ –ø—Ä—è–º–æ –≤ —Ä—É–∫–∏ ‚Äî –±–µ–∑ –æ—á–µ—Ä–µ–¥–µ–π, —à—É–º–∞ –∏ –±–µ–≥–æ—Ç–Ω–∏. 
    –ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏ –Ω–∞–ø–∏—Ç–æ–∫, —É–∫–∞–∂–∏ —á–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –ø–æ–¥–æ–π–¥–µ—à—å ‚Äî –∏ –≤—Å—ë –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ –∫ —Ç–≤–æ–µ–º—É –ø—Ä–∏—Ö–æ–¥—É.
    üëá–ù–∞—á–Ω–µ–º?""")

    path = Path(__file__).resolve().parent.parent.parent / "coffee-cup-fixed.jpg"
    photo = FSInputFile(path)

    await callback.message.edit_media(
        media=InputMediaPhoto(media=photo, caption=text),
        reply_markup=mainMenu_ikb
    )


# --- –¢–∏–ø –∫–æ—Ñ–µ ---
@router.callback_query(Order.type)
async def order_type(callback: CallbackQuery, state: FSMContext):
    choice = callback.data

    if choice == "type_cancel":
        await state.clear()
        await callback.message.edit_caption(caption="‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω", reply_markup=None)
        await start_msg(message=callback.message)
        return

    await state.update_data(type=choice)
    await state.set_state(Order.cup)

    await callback.message.edit_caption(
        caption="–ö–∞–∫–æ–π –æ–±—ä–µ–º –ø–æ–¥–æ–π–¥–µ—Ç?",
        reply_markup=cup_cofe_ikb
    )


# --- –¢–∞—Ä–∞ ---
@router.callback_query(Order.cup)
async def order_cup(callback: CallbackQuery, state: FSMContext):
    choice = callback.data

    if choice == "cup_back":
        await state.set_state(Order.type)
        await callback.message.edit_caption(
            caption="–í—ã–±–µ—Ä–∏ –∫–æ—Ñ–µ –∑–∞–Ω–æ–≤–æ üëá",
            reply_markup=type_cofe_ikb
        )
        return

    await state.update_data(cup=choice)
    await state.set_state(Order.time)

    await callback.message.edit_caption(
        caption="–ß–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –ø–æ–¥–æ–π–¥–µ—à—å –∑–∞ –∫–æ—Ñ–µ?",
        reply_markup=time_cofe_ikb
    )


# --- –í—Ä–µ–º—è ---
@router.callback_query(Order.time)
async def order_time(callback: CallbackQuery, state: FSMContext):
    choice = callback.data

    if choice == "time_back":
        await state.set_state(Order.cup)
        await callback.message.edit_caption(
            caption="–í—ã–±–µ—Ä–∏ –æ–±—ä–µ–º –∑–∞–Ω–æ–≤–æ üëá",
            reply_markup=cup_cofe_ikb
        )
        return

    await state.update_data(time=choice)
    data = await state.get_data()
    await state.set_state(Order.confirm)

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–Ω—É—Å–æ–≤ –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    user_id = callback.from_user.id
    referral_user = await postgres_client.fetchrow(
        "SELECT free_coffees FROM referral_program WHERE user_id=$1", user_id
    )
    free_coffees = referral_user['free_coffees'] if referral_user else 0

    await callback.message.edit_caption(
        caption=(f"""–ü—Ä–æ–≤–µ—Ä—å –≤—Å—ë –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π üëá\n\n
‚òïÔ∏è –ö–æ—Ñ–µ: {data.get('type')}
üìè –û–±—ä–µ–º: {data.get('cup')} –º–ª
‚è±Ô∏è –ü–æ–¥–æ–π–¥–µ—à—å —á–µ—Ä–µ–∑: {data.get('time')} –º–∏–Ω—É—Ç

–í—Å—ë –≤–µ—Ä–Ω–æ?"""),
        reply_markup=get_loyalty_ikb(free_coffees)
    )


# --- –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ ---
@router.callback_query(Order.confirm)
async def order_uproove(callback: CallbackQuery, state: FSMContext):
    choice = callback.data
    data = await state.get_data()
    user_id = callback.from_user.id

    # –ö–Ω–æ–ø–∫–∞ "–ò–∑–º–µ–Ω–∏—Ç—å"
    if choice == "loyal_program":
        # –ü—Ä–æ—Å—Ç–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—á–∞–ª—É
        await state.set_state(Order.type)
        await callback.message.edit_caption(
            caption="–û–∫–µ–π, –≤—ã–±–µ—Ä–∏ –∫–æ—Ñ–µ –∑–∞–Ω–æ–≤–æ üëá",
            reply_markup=type_cofe_ikb
        )
        return

    # –ö–Ω–æ–ø–∫–∞ "–°–ø–∏—Å–∞—Ç—å –±–æ–Ω—É—Å"
    if choice == "use_free_coffee":
        referral_user = await postgres_client.fetchrow(
            "SELECT free_coffees FROM referral_program WHERE user_id=$1", user_id
        )
        if referral_user and referral_user['free_coffees'] > 0:
            # –ù–ï —Å–ø–∏—Å—ã–≤–∞–µ–º –±–æ–Ω—É—Å –≤ –ë–î, –∞ –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–ª–∞–≥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ FSM
            await state.update_data(use_free=True)
            free_coffees_remaining = referral_user['free_coffees'] - 1

            await callback.message.edit_caption(
                caption="–ö–æ—Ñ–µ –±—É–¥–µ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º! ‚úÖ\n\n–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑.",
                reply_markup=get_loyalty_ikb(free_coffees_remaining)
            )
        else:
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∫–æ—Ñ–µ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è.", show_alert=True)

        return

    # –ö–Ω–æ–ø–∫–∞ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"
    if choice == "create_order":
        await state.set_state(Order.ready)

        caption_text = "‚úÖ –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n–ö–æ–≥–¥–∞ –±—É–¥–µ—à—å —É –≤—Ö–æ–¥–∞ ‚Äî –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –∏ –º—ã –≤—ã–Ω–µ—Å–µ–º –Ω–∞–ø–∏—Ç–æ–∫ üëá"
        order_is_free = data.get('use_free', False)

        # # --- –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Google Sheets ---
        # order_data = {
        #     'type': data.get('type'),
        #     'cup': data.get('cup'),
        #     'time': data.get('time'),
        #     'is_free': order_is_free,
        #     'user_id': user_id,
        #     'username': callback.from_user.username,
        #     'first_name': callback.from_user.first_name,
        #     'timestamp': datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        # }
        # await google_sheets_manager.add_order(order_data) # –¢–∞—Ä–∏—Ñ –°—Ç–∞–Ω–¥–∞—Ä—Ç
        # ----------------------------------------

        # --- –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ PostgreSQL ---
        order_data = {
            'type': data.get('type'),
            'cup': data.get('cup'),
            'time': data.get('time'),
            'is_free': order_is_free,
            'user_id': user_id,
            'username': callback.from_user.username,
            'first_name': callback.from_user.first_name,
            'timestamp': datetime.datetime.now()  # –£–±–∏—Ä–∞–µ–º .strftime
        }
        await postgres_client.add_order(order_data)
        # ----------------------------------------

        if order_is_free:
            caption_text = "‚úÖ –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)!\n–ö–æ–≥–¥–∞ –±—É–¥–µ—à—å —É –≤—Ö–æ–¥–∞ ‚Äî –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –∏ –º—ã –≤—ã–Ω–µ—Å–µ–º –Ω–∞–ø–∏—Ç–æ–∫ üëá"

            # –¢–û–õ–¨–ö–û –ó–î–ï–°–¨ —Å–ø–∏—Å—ã–≤–∞–µ–º –±–æ–Ω—É—Å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            await postgres_client.execute(
                "UPDATE referral_program SET free_coffees = free_coffees - 1 WHERE user_id = $1",
                user_id
            )

        await callback.message.edit_caption(
            caption=caption_text,
            reply_markup=ready_cofe_ikb
        )

        text_for_admin = (f"""‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è  –ù–æ–≤—ã–π –∑–∞–∫–∞–∑Ô∏è  @{callback.from_user.username}‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è
        ‚òïÔ∏è –ö–æ—Ñ–µ: {data.get('type')}
        üìè –û–±—ä–µ–º: {data.get('cup')} –º–ª
        ‚è±Ô∏è –ü–æ–¥–æ–π–¥—ë—Ç —á–µ—Ä–µ–∑: {data.get('time')} –º–∏–Ω—É—Ç
        """)

        if order_is_free:
            text_for_admin = "üéâ –ë–ï–°–ü–õ–ê–¢–ù–´–ô –ó–ê–ö–ê–ó üéâ\n" + text_for_admin

        await callback.bot.send_message(chat_id=config.BARISTA_CHAT_ID, text=text_for_admin)

        referral = await postgres_client.fetchrow(
            "SELECT referrer_id, rewarded FROM referral_links WHERE referred_id=$1", user_id
        )

        if referral and not referral['rewarded']:
            referrer_id = referral['referrer_id']
            await postgres_client.execute(
                "UPDATE referral_program SET free_coffees = free_coffees + 1, referred_count = referred_count + 1 WHERE user_id=$1",
                referrer_id
            )
            await postgres_client.execute(
                "UPDATE referral_links SET rewarded = TRUE WHERE referred_id = $1",
                user_id
            )

            await callback.bot.send_message(
                chat_id=referrer_id,
                text="üéâ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω –±–æ–Ω—É—Å! –ó–∞ —Ç–æ, —á—Ç–æ –≤–∞—à –¥—Ä—É–≥ —Å–¥–µ–ª–∞–ª –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑, –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –æ–¥–∏–Ω –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–æ—Ñ–µ. –û–Ω —É–∂–µ –∂–¥–µ—Ç –≤–∞—Å –≤ —Ä–∞–∑–¥–µ–ª–µ –ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–≥–∞."
            )


# --- –ö–ª–∏–µ–Ω—Ç –ø–æ–¥–æ—à–µ–ª ---
@router.callback_query(Order.ready)
async def order_ready(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()

    text = (f"""–ü—Ä–∏–≤–µ—Ç üëã! –¢—ã –≤ –±–æ—Ç–µ –∫–æ—Ñ–µ–π–Ω–∏ –ö–æ—Ñ–µ –Ω–∞ —Ö–æ–¥—É. 
        –ú—ã –≤–∞—Ä–∏–º –∫–æ—Ñ–µ —Å —Å–æ–±–æ–π –∏ –≤—ã–Ω–æ—Å–∏–º –µ–≥–æ —Ç–µ–±–µ –ø—Ä—è–º–æ –≤ —Ä—É–∫–∏ ‚Äî –±–µ–∑ –æ—á–µ—Ä–µ–¥–µ–π, —à—É–º–∞ –∏ –±–µ–≥–æ—Ç–Ω–∏. 
        –ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏ –Ω–∞–ø–∏—Ç–æ–∫, —É–∫–∞–∂–∏ —á–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –ø–æ–¥–æ–π–¥–µ—à—å ‚Äî –∏ –≤—Å—ë –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ –∫ —Ç–≤–æ–µ–º—É –ø—Ä–∏—Ö–æ–¥—É.
        üëá–ù–∞—á–Ω–µ–º?""")

    await callback.message.edit_caption(
        caption=text,
        reply_markup=mainMenu_ikb
    )

    text = (f"""–ö–ª–∏–µ–Ω—Ç –ø–æ–¥–æ—à–µ–ª üö∂‚Äç‚ôÇÔ∏è - @{callback.from_user.username}
‚òïÔ∏è –ö–æ—Ñ–µ: {data.get('type')}
üìè –û–±—ä–µ–º: {data.get('cup')} –º–ª
‚è±Ô∏è –ü–æ–¥–æ–π–¥—ë—Ç —á–µ—Ä–µ–∑: {data.get('time')} –º–∏–Ω—É—Ç
    """)
    # —Ç—É—Ç –º–æ–∂–Ω–æ —É–≤–µ–¥–æ–º–∏—Ç—å –±–∞—Ä–∏—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç)
    await callback.bot.send_message(chat_id=config.BARISTA_CHAT_ID, text=text)

    await state.clear()


# –ö–Ω–æ–ø–∫–∞ –•–æ—á—É –ë–æ—Ç–∞
@router.callback_query(F.data == "buy_bot")
async def show_partners_info(callback: CallbackQuery):
    user_id = callback.from_user.id
    username = callback.from_user.username

    await callback.message.answer(user_id=user_id,
                                  text="–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞, –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å –í–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è.")
    text = (f"""–ö–ª–∏–µ–Ω—Ç - @{callback.from_user.username}
    –•–æ—á–µ—Ç –∫—É–ø–∏—Ç—å –±–æ—Ç–∞ —Å–≤—è–∂–∏—Å—å —Å –Ω–∏–º –ù–ï–ú–ï–î–õ–ï–ù–ù–û!!!
        """)
    await callback.bot.send_message(chat_id=config.ADMIN_CHAT_ID, text=text)
