from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.filters import Command
from pathlib import Path

from core.keyboards.inline.admin_menu import analytics_menu_ikb
from core.utils.database import postgres_client
from config import config

router = Router()


# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /admin
@router.message(Command("admin"))
async def admin_panel(message: Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    # if message.from_user.id != config.ADMIN_CHAT_ID:
    #     return await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –ø–∞–Ω–µ–ª–∏.")

    path = Path(__file__).resolve().parent.parent.parent / "analitic_admin.png"
    photo = FSInputFile(path)

    await message.answer_photo(
        photo=photo,
        caption="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!",
        reply_markup=analytics_menu_ikb
    )


# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤"
@router.callback_query(F.data == "analytics_orders")
async def show_orders_analytics(callback: CallbackQuery):
    # if callback.from_user.id != config.ADMIN_CHAT_ID:
    #     return await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)

    total_orders = await postgres_client.get_total_orders_count()
    daily_orders = await postgres_client.get_daily_orders_count()

    text = "**üìä –û–±—â–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –∑–∞–∫–∞–∑–∞–º:**\n"
    text += f"‚ñ™Ô∏è –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: `{total_orders}`\n\n"

    text += "**üìà –ó–∞–∫–∞–∑—ã –ø–æ –¥–Ω—è–º:**\n"
    if daily_orders:
        for day in daily_orders:
            text += f"‚ñ™Ô∏è `{day['date']}`: `{day['count']}` –∑–∞–∫–∞–∑–æ–≤\n"
    else:
        text += "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∑–∞–∫–∞–∑–∞–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏."

    await callback.message.edit_caption(caption=text, reply_markup=analytics_menu_ikb)


# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–¢–æ–ø –Ω–∞–ø–∏—Ç–∫–æ–≤"
@router.callback_query(F.data == "analytics_top_drinks")
async def show_top_drinks(callback: CallbackQuery):
    # if callback.from_user.id != config.ADMIN_CHAT_ID:
    #     return await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)

    top_drinks = await postgres_client.get_popular_drinks()

    text = "**üìà –¢–æ–ø-5 —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –Ω–∞–ø–∏—Ç–∫–æ–≤:**\n"
    if top_drinks:
        for i, drink in enumerate(top_drinks, 1):
            text += f"{i}. `{drink['type']}`: `{drink['count']}` –∑–∞–∫–∞–∑–æ–≤\n"
    else:
        text += "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∑–∞–∫–∞–∑–∞–º."

    await callback.message.edit_caption(caption=text, reply_markup=analytics_menu_ikb)


# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∑–∞–∫–∞–∑—ã"
@router.callback_query(F.data == "analytics_free_coffees")
async def show_free_coffees_analytics(callback: CallbackQuery):
    # if callback.from_user.id != config.ADMIN_CHAT_ID:
    #     return await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)

    free_orders = await postgres_client.get_free_orders_count()
    total_orders = await postgres_client.get_total_orders_count()

    text = "**üéÅ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º –∑–∞–∫–∞–∑–∞–º:**\n"
    text += f"‚ñ™Ô∏è –í—Å–µ–≥–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: `{free_orders}`\n"

    if total_orders > 0:
        free_percentage = (free_orders / total_orders) * 100
        text += f"‚ñ™Ô∏è –ü—Ä–æ—Ü–µ–Ω—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö: `{free_percentage:.1f}%`"

    await callback.message.edit_caption(caption=text, reply_markup=analytics_menu_ikb)
