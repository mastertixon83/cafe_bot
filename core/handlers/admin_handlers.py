from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from pathlib import Path
import asyncio
from loguru import logger

# –ò–º–ø–æ—Ä—Ç—ã
from core.keyboards.inline.admin_menu import (
    admin_main_menu_ikb, analytics_menu_ikb, broadcast_menu_ikb,
    broadcast_confirm_ikb, broadcast_cancel_ikb
)
from core.utils.database import postgres_client
from config import config
from core.utils.states import Broadcast

router = Router()


# --- –û–°–ù–û–í–ù–ê–Ø –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨ ---

@router.message(Command("admin"))
async def admin_panel(message: Message):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /admin.
    –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
    """
    if message.from_user.id != config.ADMIN_CHAT_ID:
        return
    path = Path(__file__).resolve().parent.parent.parent / "analitic_admin.png"
    photo = FSInputFile(path)
    await message.answer_photo(
        photo=photo,
        caption="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!",
        reply_markup=admin_main_menu_ikb
    )


@router.callback_query(F.data == "admin_panel_back")
async def back_to_admin_panel(callback: CallbackQuery):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.
    –£–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–∞–Ω–µ–ª—å –∑–∞–Ω–æ–≤–æ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫.
    """
    if callback.from_user.id != config.ADMIN_CHAT_ID: return
    path = Path(__file__).resolve().parent.parent.parent / "analitic_admin.png"
    photo = FSInputFile(path)
    try:
        await callback.message.delete()
    except Exception:
        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ
    await callback.message.answer_photo(
        photo=photo,
        caption="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!",
        reply_markup=admin_main_menu_ikb
    )
    await callback.answer()


# --- –ë–õ–û–ö –ê–ù–ê–õ–ò–¢–ò–ö–ò ---

@router.callback_query(F.data == "admin_analytics")
async def show_analytics_menu(callback: CallbackQuery):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–¥–µ–ª–æ–≤ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏."""
    if callback.from_user.id != config.ADMIN_CHAT_ID: return
    await callback.message.edit_caption(
        caption="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:",
        reply_markup=analytics_menu_ikb
    )


@router.callback_query(F.data == "analytics_orders")
async def show_orders_analytics(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–∫–∞–∑–æ–≤ –∏ –ø–æ –¥–Ω—è–º."""
    if callback.from_user.id != config.ADMIN_CHAT_ID:
        return await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
    total_orders = await postgres_client.get_total_orders_count()
    daily_orders = await postgres_client.get_daily_orders_count()
    text = "**üìä –û–±—â–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –∑–∞–∫–∞–∑–∞–º:**\n"
    text += f"‚ñ™Ô∏è –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: `{total_orders}`\n\n"
    text += "**üìà –ó–∞–∫–∞–∑—ã –ø–æ –¥–Ω—è–º:**\n"
    if daily_orders:
        for day in daily_orders:
            text += f"‚ñ™Ô∏è `{day['date']}`: `{day['count']}` –∑–∞–∫–∞–∑–æ–≤\n"
    else:
        text += "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∑–∞–∫–∞–∑–∞–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏."
    await callback.message.edit_caption(caption=text, reply_markup=analytics_menu_ikb)


@router.callback_query(F.data == "analytics_top_drinks")
async def show_top_drinks(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ø-5 —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –Ω–∞–ø–∏—Ç–∫–æ–≤."""
    if callback.from_user.id != config.ADMIN_CHAT_ID:
        return await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
    top_drinks = await postgres_client.get_popular_drinks()
    text = "**üìà –¢–æ–ø-5 —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –Ω–∞–ø–∏—Ç–∫–æ–≤:**\n"
    if top_drinks:
        for i, drink in enumerate(top_drinks, 1):
            text += f"{i}. `{drink['type']}`: `{drink['count']}` –∑–∞–∫–∞–∑–æ–≤\n"
    else:
        text += "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∑–∞–∫–∞–∑–∞–º."
    await callback.message.edit_caption(caption=text, reply_markup=analytics_menu_ikb)


@router.callback_query(F.data == "analytics_free_coffees")
async def show_free_coffees_analytics(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º –∑–∞–∫–∞–∑–∞–º, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–º –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏."""
    if callback.from_user.id != config.ADMIN_CHAT_ID:
        return await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
    free_orders = await postgres_client.get_free_orders_count()
    total_orders = await postgres_client.get_total_orders_count()
    text = "**üéÅ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º –∑–∞–∫–∞–∑–∞–º:**\n"
    text += f"‚ñ™Ô∏è –í—Å–µ–≥–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: `{free_orders}`\n"
    if total_orders > 0:
        free_percentage = (free_orders / total_orders) * 100
        text += f"‚ñ™Ô∏è –ü—Ä–æ—Ü–µ–Ω—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö: `{free_percentage:.1f}%`"
    await callback.message.edit_caption(caption=text, reply_markup=analytics_menu_ikb)


# --- –ë–õ–û–ö –†–ê–°–°–´–õ–ö–ò ---

@router.callback_query(F.data == "admin_broadcast")
async def broadcast_menu(callback: CallbackQuery, state: FSMContext):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–æ–π.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ç–µ–∫—Å—Ç –∏/–∏–ª–∏ —Ñ–æ—Ç–æ).
    """
    if callback.from_user.id != config.ADMIN_CHAT_ID: return
    await state.clear()
    record = await postgres_client.fetchrow("SELECT message_text, photo_id FROM broadcast WHERE id = 1")
    current_text = record.get('message_text') if record else None
    current_photo = record.get('photo_id') if record else None
    caption = "–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–æ–π.\n\n**–¢–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:**\n\n"
    await callback.message.delete()
    if not current_text and not current_photo:
        caption += "–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –µ—â–µ –Ω–µ –∑–∞–¥–∞–Ω–æ."
        await callback.message.answer(text=caption, reply_markup=broadcast_menu_ikb)
    else:
        if current_photo:
            await callback.message.answer_photo(
                photo=current_photo,
                caption=caption + (current_text or ""),
                reply_markup=broadcast_menu_ikb
            )
        else:
            await callback.message.answer(
                text=caption + current_text,
                reply_markup=broadcast_menu_ikb
            )


@router.callback_query(F.data == "broadcast_change_text")
async def broadcast_change_text(callback: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç –∞–¥–º–∏–Ω–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏."""
    if callback.from_user.id != config.ADMIN_CHAT_ID: return
    await state.set_state(Broadcast.waiting_for_message)
    try:
        await callback.message.edit_caption(
            caption="–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.\n\n–≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å:\n- –ü—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç\n- –ö–∞—Ä—Ç–∏–Ω–∫–∞ —Å –ø–æ–¥–ø–∏—Å—å—é",
            reply_markup=broadcast_cancel_ikb
        )
    except Exception:
        await callback.message.delete()
        await callback.message.answer(
            text="–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.\n\n–≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å:\n- –ü—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç\n- –ö–∞—Ä—Ç–∏–Ω–∫–∞ —Å –ø–æ–¥–ø–∏—Å—å—é",
            reply_markup=broadcast_cancel_ikb
        )


@router.callback_query(F.data == "broadcast_cancel_input", Broadcast.waiting_for_message)
async def broadcast_cancel_input(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏."""
    await state.clear()
    await back_to_admin_panel(callback)


@router.message(Broadcast.waiting_for_message, F.text | F.photo)
async def broadcast_message_received(message: Message, state: FSMContext):
    """
    –õ–æ–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∞ (—Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ), —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –≤ –ë–î
    –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–≤—å—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
    """
    if message.from_user.id != config.ADMIN_CHAT_ID: return
    photo_id = None
    text = ""
    if message.photo:
        photo_id = message.photo[-1].file_id
        text = message.caption or ""
    elif message.text:
        text = message.text
    await postgres_client.execute(
        "UPDATE broadcast SET message_text = $1, photo_id = $2 WHERE id = 1",
        text, photo_id
    )
    await state.clear()
    await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ. –í–æ—Ç –∫–∞–∫ –æ–Ω–æ –≤—ã–≥–ª—è–¥–∏—Ç:")
    if photo_id:
        await message.answer_photo(photo_id, caption=text, reply_markup=broadcast_menu_ikb)
    else:
        await message.answer(text, reply_markup=broadcast_menu_ikb)


@router.callback_query(F.data == "broadcast_start")
async def broadcast_start(callback: CallbackQuery):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –∞–¥–º–∏–Ω–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–∞—Å—Å—ã–ª–∫–∏.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —Å–∫–æ–ª—å–∫–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    if callback.from_user.id != config.ADMIN_CHAT_ID: return
    record = await postgres_client.fetchrow("SELECT message_text, photo_id FROM broadcast WHERE id = 1")
    if not record or (not record['message_text'] and not record['photo_id']):
        await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞–¥–∞—Ç—å —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏!", show_alert=True)
        return
    users = await postgres_client.fetch("SELECT telegram_id FROM users WHERE is_active = TRUE")
    try:
        await callback.message.edit_caption(
            caption=f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É?\n\n–°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ `{len(users)}` –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.",
            reply_markup=broadcast_confirm_ikb
        )
    except Exception:
        await callback.message.delete()
        await callback.message.answer(
            text=f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É?\n\n–°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ `{len(users)}` –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.",
            reply_markup=broadcast_confirm_ikb
        )


@router.callback_query(F.data == "broadcast_confirm_no")
async def broadcast_confirm_no(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É –Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å—ã–ª–∫–∏."""
    await broadcast_menu(callback, state)


@router.callback_query(F.data == "broadcast_confirm_yes")
async def broadcast_confirm_yes(callback: CallbackQuery, bot: Bot):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
    –°–æ–æ–±—â–∞–µ—Ç –∞–¥–º–∏–Ω—É –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –∏ –∏—Ç–æ–≥–æ–≤–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ.
    """
    if callback.from_user.id != config.ADMIN_CHAT_ID: return
    try:
        await callback.message.edit_text(text="üöÄ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞...", reply_markup=None)
    except Exception:
        await callback.message.edit_caption(caption="üöÄ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞...", reply_markup=None)

    record = await postgres_client.fetchrow("SELECT message_text, photo_id FROM broadcast WHERE id = 1")
    text_to_send = record['message_text']
    photo_to_send = record['photo_id']

    users = await postgres_client.fetch("SELECT telegram_id FROM users WHERE is_active = TRUE")

    success_count = 0
    fail_count = 0

    status_message = await callback.message.answer(f"–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")

    for i, user in enumerate(users):
        user_id = user['telegram_id']
        try:
            if photo_to_send:
                await bot.send_photo(user_id, photo_to_send, caption=text_to_send)
            else:
                await bot.send_message(user_id, text_to_send)
            success_count += 1
        except Exception as e:
            fail_count += 1
            logger.warning(f"Failed to send message to user {user_id}: {e}")

        if (i + 1) % 20 == 0 or (i + 1) == len(users):
            try:
                await status_message.edit_text(
                    f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {i + 1}/{len(users)}\n"
                    f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}\n"
                    f"‚ùå –û—à–∏–±–æ–∫: {fail_count}"
                )
            except Exception:
                pass
        await asyncio.sleep(0.1)

    await status_message.edit_text(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: `{success_count}`\n"
        f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: `{fail_count}`"
    )

    await back_to_admin_panel(callback)
