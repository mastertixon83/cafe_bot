from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, BufferedInputFile, FSInputFile
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from pathlib import Path
import asyncio
import io
import csv
import datetime
from typing import Union
from loguru import logger

# –ò–º–ø–æ—Ä—Ç—ã
from core.filters.is_admin import IsAdmin
from core.utils.database import postgres_client
from config import config
from core.utils.states import Broadcast, AdminReport
from core.keyboards.inline.admin_menu import (
    admin_main_menu_ikb, analytics_menu_ikb, broadcast_menu_ikb,
    broadcast_confirm_ikb, get_report_ikb, cancel_ikb
)

router = Router()
# –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –∞–¥–º–∏–Ω–∞ –∫–æ –≤—Å–µ–º —Ö–µ–Ω–¥–ª–µ—Ä–∞–º –≤ —ç—Ç–æ–º —Ñ–∞–π–ª–µ
router.message.filter(IsAdmin())
router.callback_query.filter(IsAdmin())


# =================================================================
#               –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# =================================================================

async def generate_csv_from_orders(orders: list) -> io.StringIO:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç CSV-—Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤.

    Args:
        orders (list): –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –æ –∑–∞–∫–∞–∑–∞—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.

    Returns:
        io.StringIO: –û–±—ä–µ–∫—Ç, –∏–º–∏—Ç–∏—Ä—É—é—â–∏–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å CSV-–¥–∞–Ω–Ω—ã–º–∏.
    """
    output = io.StringIO()
    fieldnames = [
        'ID –ó–∞–∫–∞–∑–∞', '–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è', '–ö–ª–∏–µ–Ω—Ç', 'Username', '–ù–∞–ø–∏—Ç–æ–∫', '–°–∏—Ä–æ–ø',
        '–û–±—ä–µ–º', '–î–æ–±–∞–≤–∫–∞', '–°—É–º–º–∞', '–°—Ç–∞—Ç—É—Å –ó–∞–∫–∞–∑–∞', '–°—Ç–∞—Ç—É—Å –û–ø–ª–∞—Ç—ã'
    ]
    writer = csv.DictWriter(output, fieldnames=fieldnames, delimiter=';')
    writer.writeheader()
    for order in orders:
        writer.writerow({
            'ID –ó–∞–∫–∞–∑–∞': order['order_id'],
            '–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è': order['created_at'].strftime('%Y-%m-%d %H:%M:%S'),
            '–ö–ª–∏–µ–Ω—Ç': order['first_name'],
            'Username': f"@{order['username']}" if order['username'] else 'N/A',
            '–ù–∞–ø–∏—Ç–æ–∫': order['type'],
            '–°–∏—Ä–æ–ø': order['syrup'],
            '–û–±—ä–µ–º': f"{order['cup']} –º–ª",
            '–î–æ–±–∞–≤–∫–∞': order['croissant'],
            '–°—É–º–º–∞': order['total_price'],
            '–°—Ç–∞—Ç—É—Å –ó–∞–∫–∞–∑–∞': order['status'],
            '–°—Ç–∞—Ç—É—Å –û–ø–ª–∞—Ç—ã': order['payment_status'],
        })
    output.seek(0)
    return output


# =================================================================
#                       –ì–õ–ê–í–ù–ê–Ø –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨
# =================================================================

@router.message(Command("admin"))
async def admin_panel(message: Message):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /admin.
    –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
    """
    path = Path(__file__).resolve().parent.parent.parent / "analitic_admin.png"
    photo = FSInputFile(path)
    await message.answer_photo(
        photo=photo,
        caption="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!",
        reply_markup=admin_main_menu_ikb
    )


@router.callback_query(F.data == "admin_panel_back")
async def back_to_admin_panel(callback: CallbackQuery, state: FSMContext):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.
    –£–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–∞–Ω–µ–ª—å –∑–∞–Ω–æ–≤–æ.
    """
    await state.clear()
    await callback.message.delete()
    await admin_panel(callback.message)
    await callback.answer()


@router.callback_query(F.data == "cancel_input")
async def cancel_any_input(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω—è–µ—Ç –ª—é–±–æ–π –≤–≤–æ–¥ (–¥–∞—Ç—ã, —Ç–µ–∫—Å—Ç–∞) –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –∞–¥–º–∏–Ω–∫—É."""
    await state.clear()
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ –≤–≤–æ–¥
    await callback.message.delete()
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏ –∫–∞–∫ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await admin_panel(callback.message)
    await callback.answer("–í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω.")


# =================================================================
#                       –ë–õ–û–ö –ê–ù–ê–õ–ò–¢–ò–ö–ò
# =================================================================

@router.callback_query(F.data == "admin_analytics")
async def show_analytics_menu(callback: CallbackQuery):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–¥–µ–ª–æ–≤ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏."""
    await callback.message.edit_caption(
        caption="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:",
        reply_markup=analytics_menu_ikb
    )


@router.callback_query(F.data == "analytics_orders")
async def show_orders_analytics(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–∫–∞–∑–æ–≤ –∏ –ø–æ –¥–Ω—è–º."""
    total_orders = await postgres_client.get_total_orders_count()
    daily_orders = await postgres_client.get_daily_orders_count()
    text = "**üìä –û–±—â–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –∑–∞–∫–∞–∑–∞–º:**\n"
    text += f"‚ñ™Ô∏è –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: `{total_orders}`\n\n"
    text += "**üìà –ó–∞–∫–∞–∑—ã –ø–æ –¥–Ω—è–º:**\n"
    if daily_orders:
        for day in daily_orders:
            text += f"‚ñ™Ô∏è `{day['date']}`: `{day['count']}` –∑–∞–∫–∞–∑–æ–≤\n"
    else:
        text += "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∑–∞–∫–∞–∑–∞–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏."
    await callback.message.edit_caption(caption=text, reply_markup=analytics_menu_ikb)


@router.callback_query(F.data == "analytics_top_drinks")
async def show_top_drinks(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ø-5 —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –Ω–∞–ø–∏—Ç–∫–æ–≤."""
    top_drinks = await postgres_client.get_popular_drinks()
    text = "**üìà –¢–æ–ø-5 —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –Ω–∞–ø–∏—Ç–∫–æ–≤:**\n"
    if top_drinks:
        for i, drink in enumerate(top_drinks, 1):
            text += f"{i}. `{drink['type']}`: `{drink['count']}` –∑–∞–∫–∞–∑–æ–≤\n"
    else:
        text += "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∑–∞–∫–∞–∑–∞–º."
    await callback.message.edit_caption(caption=text, reply_markup=analytics_menu_ikb)


@router.callback_query(F.data == "analytics_free_coffees")
async def show_free_coffees_analytics(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º –∑–∞–∫–∞–∑–∞–º, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–º –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏."""
    free_orders = await postgres_client.get_free_orders_count()
    total_orders = await postgres_client.get_total_orders_count()
    text = "**üéÅ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º –∑–∞–∫–∞–∑–∞–º:**\n"
    text += f"‚ñ™Ô∏è –í—Å–µ–≥–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: `{free_orders}`\n"
    if total_orders > 0:
        free_percentage = (free_orders / total_orders) * 100
        text += f"‚ñ™Ô∏è –ü—Ä–æ—Ü–µ–Ω—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö: `{free_percentage:.1f}%`"
    await callback.message.edit_caption(caption=text, reply_markup=analytics_menu_ikb)


# =================================================================
#                       –ë–õ–û–ö –≠–ö–°–ü–û–†–¢–ê –ó–ê–ö–ê–ó–û–í
# =================================================================

@router.callback_query(F.data == "get_report")
async def get_report_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –æ—Ç—á–µ—Ç–∞."""
    await callback.message.edit_caption(caption="–ó–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ –≤—ã–≥—Ä—É–∑–∏—Ç—å –æ—Ç—á–µ—Ç –ø–æ –∑–∞–∫–∞–∑–∞–º?",
                                        reply_markup=get_report_ikb)


@router.callback_query(F.data.startswith("export_"))
async def send_report_callback(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏–ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–∞—Ç—É.
    """
    action = callback.data.split('_', 1)[1]

    if action == "by_date":
        await state.set_state(AdminReport.waiting_for_date)
        await callback.message.edit_caption(
            caption="–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ `–ì–ì–ì–ì-–ú–ú-–î–î` (–Ω–∞–ø—Ä–∏–º–µ—Ä, `2025-10-31`).",
            reply_markup=cancel_ikb
        )
        await callback.answer()
        return

    await callback.answer(f"‚è≥ –§–æ—Ä–º–∏—Ä—É—é –æ—Ç—á–µ—Ç –∑–∞ '{action}'...", show_alert=False)

    try:
        orders = await postgres_client.get_orders_for_export(action)

        await callback.message.delete()

        if not orders:
            await callback.message.answer("–ó–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–∫–∞–∑–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        else:
            csv_file = await generate_csv_from_orders(orders)
            file_to_send = BufferedInputFile(file=csv_file.getvalue().encode('utf-8'), filename=f"report_{action}.csv")
            await callback.message.answer_document(
                document=file_to_send,
                caption=f"üìÑ –í–∞—à –æ—Ç—á–µ—Ç '{action}'.\n–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {len(orders)}"
            )

        await admin_panel(callback.message)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}", exc_info=True)
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞.")
        await admin_panel(callback.message)


@router.message(AdminReport.waiting_for_date, F.text)
async def process_date_report(message: Message, state: FSMContext):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞—Ç—É –æ—Ç –∞–¥–º–∏–Ω–∞, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å.
    """
    try:
        report_date = datetime.datetime.strptime(message.text.strip(), "%Y-%m-%d").date()
    except ValueError:
        await message.answer("‚ùóÔ∏è–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ `–ì–ì–ì–ì-–ú–ú-–î–î`.",
                             reply_markup=cancel_ikb)
        return

    await state.clear()
    await message.answer(f"‚è≥ –§–æ—Ä–º–∏—Ä—É—é –æ—Ç—á–µ—Ç –∑–∞ `{report_date}`...")

    try:
        orders = await postgres_client.get_orders_by_date(report_date)

        if not orders:
            await message.answer("–ó–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–∫–∞–∑–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        else:
            csv_file = await generate_csv_from_orders(orders)
            file_to_send = BufferedInputFile(file=csv_file.getvalue().encode('utf-8'),
                                             filename=f"report_{report_date}.csv")
            await message.answer_document(
                document=file_to_send,
                caption=f"üìÑ –í–∞—à –æ—Ç—á–µ—Ç –∑–∞ `{report_date}`.\n–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {len(orders)}"
            )

        await admin_panel(message)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –ø–æ –¥–∞—Ç–µ: {e}", exc_info=True)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞ –ø–æ –¥–∞—Ç–µ.")
        await admin_panel(message)


# =================================================================
#                       –ë–õ–û–ö –†–ê–°–°–´–õ–ö–ò
# =================================================================

@router.callback_query(F.data == "admin_broadcast")
async def broadcast_menu(callback: CallbackQuery, state: FSMContext):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–æ–π.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ç–µ–∫—Å—Ç –∏/–∏–ª–∏ —Ñ–æ—Ç–æ).
    """
    await state.clear()
    record = await postgres_client.fetchrow("SELECT message_text, photo_id FROM broadcast WHERE id = 1")
    current_text = record.get('message_text') if record else None
    current_photo = record.get('photo_id') if record else None
    caption = "–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–æ–π.\n\n**–¢–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:**\n\n"
    await callback.message.delete()
    if not current_text and not current_photo:
        caption += "–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –µ—â–µ –Ω–µ –∑–∞–¥–∞–Ω–æ."
        await callback.message.answer(text=caption, reply_markup=broadcast_menu_ikb)
    else:
        if current_photo:
            await callback.message.answer_photo(
                photo=current_photo, caption=caption + (current_text or ""), reply_markup=broadcast_menu_ikb
            )
        else:
            await callback.message.answer(text=caption + current_text, reply_markup=broadcast_menu_ikb)


@router.callback_query(F.data == "broadcast_change_text")
async def broadcast_change_text(callback: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç –∞–¥–º–∏–Ω–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏."""
    await state.set_state(Broadcast.waiting_for_message)
    await callback.message.delete()
    await callback.message.answer(
        text="–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.\n\n–≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å:\n- –ü—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç\n- –ö–∞—Ä—Ç–∏–Ω–∫–∞ —Å –ø–æ–¥–ø–∏—Å—å—é",
        reply_markup=cancel_ikb
    )


@router.message(Broadcast.waiting_for_message, F.text | F.photo)
async def broadcast_message_received(message: Message, state: FSMContext):
    """
    –õ–æ–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∞ (—Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ), —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –≤ –ë–î
    –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–≤—å—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
    """
    photo_id = message.photo[-1].file_id if message.photo else None
    text = message.caption or message.text or ""

    await postgres_client.execute(
        "UPDATE broadcast SET message_text = $1, photo_id = $2 WHERE id = 1", text, photo_id
    )
    await state.clear()

    await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")

    class FakeCallback:
        def __init__(self, msg): self.message = msg; self.from_user = msg.from_user

        async def answer(self): pass

    await broadcast_menu(FakeCallback(message), state)


@router.callback_query(F.data == "broadcast_start")
async def broadcast_start(callback: CallbackQuery):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –∞–¥–º–∏–Ω–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–∞—Å—Å—ã–ª–∫–∏.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —Å–∫–æ–ª—å–∫–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    record = await postgres_client.fetchrow("SELECT message_text, photo_id FROM broadcast WHERE id = 1")
    if not record or (not record['message_text'] and not record['photo_id']):
        await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞–¥–∞—Ç—å —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏!", show_alert=True)
        return

    users_count = await postgres_client.fetchval("SELECT COUNT(*) FROM users WHERE is_active = TRUE")
    await callback.message.delete()
    await callback.message.answer(
        text=f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É?\n\n–°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ `{users_count}` –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.",
        reply_markup=broadcast_confirm_ikb
    )


@router.callback_query(F.data == "broadcast_confirm_no")
async def broadcast_confirm_no(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É –Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å—ã–ª–∫–∏."""
    await broadcast_menu(callback, state)


@router.callback_query(F.data == "broadcast_confirm_yes")
async def broadcast_confirm_yes(callback: CallbackQuery, bot: Bot, state: FSMContext):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
    –°–æ–æ–±—â–∞–µ—Ç –∞–¥–º–∏–Ω—É –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –∏ –∏—Ç–æ–≥–æ–≤–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ.
    """
    await callback.message.edit_text(text="üöÄ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞...", reply_markup=None)

    record = await postgres_client.fetchrow("SELECT message_text, photo_id FROM broadcast WHERE id = 1")
    text_to_send = record['message_text']
    photo_to_send = record['photo_id']

    users = await postgres_client.fetch("SELECT telegram_id FROM users WHERE is_active = TRUE")

    success_count, fail_count, total_users = 0, 0, len(users)
    status_message = await callback.message.answer(f"–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {total_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")

    for i, user in enumerate(users):
        user_id = user['telegram_id']
        try:
            if photo_to_send:
                await bot.send_photo(user_id, photo_to_send, caption=text_to_send)
            else:
                await bot.send_message(user_id, text_to_send)
            success_count += 1
        except Exception as e:
            fail_count += 1
            logger.warning(f"Failed to send to user {user_id}: {e}. Deactivating user.")
            await postgres_client.update("users", {"is_active": False}, "telegram_id = $1", [user_id])

        if (i + 1) % 20 == 0 or (i + 1) == total_users:
            try:
                await status_message.edit_text(
                    f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {i + 1}/{total_users}\n"
                    f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}\n"
                    f"‚ùå –û—à–∏–±–æ–∫ (—é–∑–µ—Ä—ã –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã): {fail_count}"
                )
            except Exception:
                pass
        await asyncio.sleep(0.1)

    await status_message.answer(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"–£—Å–ø–µ—à–Ω–æ: `{success_count}`\n"
        f"–ù–µ —É–¥–∞–ª–æ—Å—å: `{fail_count}`"
    )
    await asyncio.sleep(2)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∞–¥–º–∏–Ω–∫—É
    class FakeCallback:
        def __init__(self, msg): self.message = msg; self.from_user = msg.from_user

        async def answer(self): pass

    await back_to_admin_panel(FakeCallback(status_message), state)
