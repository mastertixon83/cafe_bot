# core/utils/database.py (–ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø –° –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø–ú–ò)

import asyncpg
from typing import Optional, Any, List, Dict, Union
from loguru import logger
from config import config


class PostgresClient:
    """
    –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å PostgreSQL —á–µ—Ä–µ–∑ asyncpg.
    –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏, –∑–∞–∫—Ä—ã—Ç–∏—è –ø—É–ª–∞ –∏ –±–∞–∑–æ–≤—ã—Ö CRUD-–æ–ø–µ—Ä–∞—Ü–∏–π.
    """

    def __init__(self):
        self.pool: Optional[asyncpg.Pool] = None
        logger.info("PostgresClient instance created (pool not initialized)")

    async def initialize(self) -> None:
        """–°–æ–∑–¥–∞—ë—Ç –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å PostgreSQL."""
        if self.pool is None:
            try:
                self.pool = await asyncpg.create_pool(
                    dsn=config.POSTGRES_DSN,
                    min_size=1,
                    max_size=10,
                    command_timeout=30
                )
                logger.info("‚úÖ PostgreSQL pool initialized successfully")
            except Exception as e:
                logger.error(f"‚ùå Failed to initialize PostgreSQL pool: {e}")
                raise

    async def close(self) -> None:
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π."""
        if self.pool:
            try:
                await self.pool.close()
                logger.info("‚úÖ PostgreSQL pool closed successfully")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Error while closing PostgreSQL pool: {e}")
            finally:
                self.pool = None

    # ===== CRUD –º–µ—Ç–æ–¥—ã =====
    async def fetch(self, query: str, *args) -> List[asyncpg.Record]:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å SELECT –∏ –≤–µ—Ä–Ω—É—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫."""
        async with self.pool.acquire() as conn:
            logger.debug(f"üì• fetch: {query} {args}")
            return await conn.fetch(query, *args)

    async def fetchrow(self, query: str, *args) -> Optional[asyncpg.Record]:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å SELECT –∏ –≤–µ—Ä–Ω—É—Ç—å –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É –∏–ª–∏ None."""
        async with self.pool.acquire() as conn:
            logger.debug(f"üì• fetchrow: {query} {args}")
            return await conn.fetchrow(query, *args)

    async def fetchval(self, query: str, *args) -> Optional[Any]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ."""
        async with self.pool.acquire() as conn:
            logger.debug(f"üì• fetchval: {query} {args}")
            return await conn.fetchval(query, *args)

    async def execute(self, query: str, *args) -> str:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å INSERT/UPDATE/DELETE –∏ –≤–µ—Ä–Ω—É—Ç—å —Å—Ç–∞—Ç—É—Å."""
        async with self.pool.acquire() as conn:
            logger.debug(f"‚ö° execute: {query} {args}")
            return await conn.execute(query, *args)

    async def insert(self, table: str, data: Dict[str, Any]) -> None:
        """–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É."""
        keys = ", ".join(data.keys())
        placeholders = ", ".join(f"${i + 1}" for i in range(len(data)))
        query = f"INSERT INTO {table} ({keys}) VALUES ({placeholders})"
        values = list(data.values())
        await self.execute(query, *values)
        logger.info(f"‚úÖ Inserted into {table}: {data}")

    async def update(self, table: str, data: Dict[str, Any], where: str, params: Union[List[Any], tuple]) -> None:
        """
        –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω—É–º–µ—Ä—É–µ—Ç –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã.
        :param table: –∏–º—è —Ç–∞–±–ª–∏—Ü—ã
        :param data: dict —Å –∏–∑–º–µ–Ω—è–µ–º—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        :param where: SQL-—É—Å–ª–æ–≤–∏–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä "id=$1 AND name=$2"
        :param params: —Å–ø–∏—Å–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è —É—Å–ª–æ–≤–∏—è
        """
        # –≠—Ç–∞ —á–∞—Å—Ç—å –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç "key1=$1, key2=$2, ..."
        set_expr = ", ".join(f"{k}=${i + 1}" for i, k in enumerate(data.keys()))

        # --- –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê ---
        # –£–∑–Ω–∞–µ–º, —Å–∫–æ–ª—å–∫–æ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤ —É–∂–µ –∑–∞–Ω—è—Ç–æ –≤ SET
        num_set_params = len(data.keys())

        # –°–¥–≤–∏–≥–∞–µ–º –Ω—É–º–µ—Ä–∞—Ü–∏—é –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤ –≤ —É—Å–ª–æ–≤–∏–∏ WHERE
        # –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –±—ã–ª–æ "id=$1", –∞ –≤ SET —É–∂–µ –µ—Å—Ç—å 2 –ø–∞—Ä–∞–º–µ—Ç—Ä–∞, —Ç–æ —Å—Ç–∞–Ω–µ—Ç "id=$3"
        temp_where = where
        for i in range(len(params), 0, -1):
            temp_where = temp_where.replace(f'${i}', f'${i + num_set_params}')
        # --- –ö–û–ù–ï–¶ –ù–û–í–û–ô –õ–û–ì–ò–ö–ò ---

        query = f"UPDATE {table} SET {set_expr} WHERE {temp_where}"

        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        values = list(data.values()) + list(params)

        await self.execute(query, *values)
        logger.info(f"‚úèÔ∏è Updated {table}: {data}, WHERE {where} -> {params}")

    # <<< --- –ò–ó–ú–ï–ù–ï–ù–ù–´–ô –ú–ï–¢–û–î –ó–î–ï–°–¨ --- >>>
    async def add_order(self, order_data: Dict[str, Any]) -> Optional[asyncpg.Record]:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –≤ —Ç–∞–±–ª–∏—Ü—É orders –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å—é —Å–æ–∑–¥–∞–Ω–Ω—É—é –∑–∞–ø–∏—Å—å.
        """
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å 'new' –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ –¥–∞–Ω–Ω—ã—Ö
        if 'status' not in order_data:
            order_data['status'] = 'new'

        keys = ", ".join(order_data.keys())
        placeholders = ", ".join(f"${i + 1}" for i in range(len(order_data)))

        # 1. –ò–∑–º–µ–Ω–∏–ª–∏ 'RETURNING order_id' –Ω–∞ 'RETURNING *'
        query = f"INSERT INTO orders ({keys}) VALUES ({placeholders}) RETURNING *"
        values = list(order_data.values())

        async with self.pool.acquire() as conn:
            # 2. –ò–∑–º–µ–Ω–∏–ª–∏ 'fetchval' –Ω–∞ 'fetchrow', —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤—Å—é —Å—Ç—Ä–æ–∫—É
            new_order_record = await conn.fetchrow(query, *values)
            if new_order_record:
                # –í –≤–∞—à–µ–π —Ç–∞–±–ª–∏—Ü–µ –∫–æ–ª–æ–Ω–∫–∞ —Å id –º–æ–∂–µ—Ç –Ω–∞–∑—ã–≤–∞—Ç—å—Å—è 'id' –∏–ª–∏ 'order_id'
                # asyncpg.Record –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ–±—Ä–∞—â–∞—Ç—å—Å—è –ø–æ –∏–º–µ–Ω–∏ –∫–æ–ª–æ–Ω–∫–∏
                order_id = new_order_record['id'] if 'id' in new_order_record else new_order_record.get('order_id')
                logger.info(f"‚úÖ New order added with ID: {order_id}")
            return new_order_record

    # ===== –ú–ï–¢–û–î–´ –î–õ–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ò (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) =====
    async def get_total_orders_count(self) -> int:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤."""
        query = "SELECT COUNT(*) FROM orders;"
        return await self.fetchval(query)

    async def get_daily_orders_count(self) -> List[dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –ø–æ –¥–Ω—è–º."""
        query = """
        SELECT
            DATE(created_at) AS date,
            COUNT(*) AS count
        FROM orders
        GROUP BY date
        ORDER BY date;
        """
        records = await self.fetch(query)
        return [{"date": record['date'].strftime('%Y-%m-%d'), "count": record['count']} for record in records]

    async def get_popular_drinks(self) -> List[dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–ø-5 —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –Ω–∞–ø–∏—Ç–∫–æ–≤."""
        query = """
        SELECT
            type,
            COUNT(*) AS count
        FROM orders
        GROUP BY type
        ORDER BY count DESC
        LIMIT 5;
        """
        records = await self.fetch(query)
        return [{"type": record['type'], "count": record['count']} for record in records]

    async def get_free_orders_count(self) -> int:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤."""
        query = "SELECT COUNT(*) FROM orders WHERE is_free = TRUE;"
        return await self.fetchval(query)

    async def get_orders_for_export(self, period: str) -> list:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –∏–∑ –ë–î –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ CSV.

        Args:
            period (str): –ü–µ—Ä–∏–æ–¥ –¥–ª—è –≤—ã–±–æ—Ä–∫–∏ ('today', 'week', 'month', 'all').

        Returns:
            –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –æ –∑–∞–∫–∞–∑–∞—Ö.
        """
        query_part = ""
        if period == 'today':
            # –ó–∞–∫–∞–∑—ã –∑–∞ —Ç–µ–∫—É—â–∏–µ —Å—É—Ç–∫–∏
            query_part = "WHERE created_at::date = NOW()::date"
        elif period == 'week':
            # –ó–∞–∫–∞–∑—ã —Å –Ω–∞—á–∞–ª–∞ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏ (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)
            query_part = "WHERE created_at >= date_trunc('week', NOW())"
        elif period == 'month':
            # –ó–∞–∫–∞–∑—ã —Å –Ω–∞—á–∞–ª–∞ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
            query_part = "WHERE created_at >= date_trunc('month', NOW())"

        # –î–ª—è 'all' query_part –æ—Å—Ç–∞–µ—Ç—Å—è –ø—É—Å—Ç—ã–º, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã

        query = f"SELECT * FROM orders {query_part} ORDER BY created_at DESC"
        async with self.pool.acquire() as conn:
            return await conn.fetch(query)

    async def get_orders_by_date(self, report_date: datetime.date) -> list:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É.

        Args:
            report_date (datetime.date): –î–∞—Ç–∞, –∑–∞ –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–µ–Ω –æ—Ç—á–µ—Ç.

        Returns:
            –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –æ –∑–∞–∫–∞–∑–∞—Ö.
        """
        query = "SELECT * FROM orders WHERE created_at::date = $1 ORDER BY created_at DESC"
        async with self.pool.acquire() as conn:
            return await conn.fetch(query, report_date)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
postgres_client = PostgresClient()
