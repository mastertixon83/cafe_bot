import asyncpg
from typing import Optional, Any, List, Dict, Union
from loguru import logger
from config import config


class PostgresClient:
    """
    –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å PostgreSQL —á–µ—Ä–µ–∑ asyncpg.
    –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏, –∑–∞–∫—Ä—ã—Ç–∏—è –ø—É–ª–∞ –∏ –±–∞–∑–æ–≤—ã—Ö CRUD-–æ–ø–µ—Ä–∞—Ü–∏–π.
    """

    def __init__(self):
        self.pool: Optional[asyncpg.Pool] = None
        logger.info("PostgresClient instance created (pool not initialized)")

    async def initialize(self) -> None:
        """–°–æ–∑–¥–∞—ë—Ç –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å PostgreSQL."""
        if self.pool is None:
            try:
                self.pool = await asyncpg.create_pool(
                    dsn=config.POSTGRES_DSN,  # "postgresql://user:pass@localhost:5432/dbname"
                    min_size=1,
                    max_size=10,
                    command_timeout=30
                )
                logger.info("‚úÖ PostgreSQL pool initialized successfully")
            except Exception as e:
                logger.error(f"‚ùå Failed to initialize PostgreSQL pool: {e}")
                raise

    async def close(self) -> None:
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π."""
        if self.pool:
            try:
                await self.pool.close()
                logger.info("‚úÖ PostgreSQL pool closed successfully")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Error while closing PostgreSQL pool: {e}")
            finally:
                self.pool = None

    # ===== CRUD –º–µ—Ç–æ–¥—ã =====
    async def fetch(self, query: str, *args) -> List[asyncpg.Record]:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å SELECT –∏ –≤–µ—Ä–Ω—É—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫."""
        async with self.pool.acquire() as conn:
            logger.debug(f"üì• fetch: {query} {args}")
            return await conn.fetch(query, *args)

    async def fetchrow(self, query: str, *args) -> Optional[asyncpg.Record]:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å SELECT –∏ –≤–µ—Ä–Ω—É—Ç—å –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É –∏–ª–∏ None."""
        async with self.pool.acquire() as conn:
            logger.debug(f"üì• fetchrow: {query} {args}")
            return await conn.fetchrow(query, *args)

    async def fetchval(self, query: str, *args) -> Optional[Any]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ."""
        async with self.pool.acquire() as conn:
            logger.debug(f"üì• fetchval: {query} {args}")
            return await conn.fetchval(query, *args)

    async def execute(self, query: str, *args) -> str:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å INSERT/UPDATE/DELETE –∏ –≤–µ—Ä–Ω—É—Ç—å —Å—Ç–∞—Ç—É—Å."""
        async with self.pool.acquire() as conn:
            logger.debug(f"‚ö° execute: {query} {args}")
            return await conn.execute(query, *args)

    async def insert(self, table: str, data: Dict[str, Any]) -> None:
        """–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É."""
        keys = ", ".join(data.keys())
        placeholders = ", ".join(f"${i + 1}" for i in range(len(data)))
        query = f"INSERT INTO {table} ({keys}) VALUES ({placeholders})"
        values = list(data.values())
        await self.execute(query, *values)
        logger.info(f"‚úÖ Inserted into {table}: {data}")

    async def update(self, table: str, data: Dict[str, Any], where: str, params: Union[List[Any], tuple]) -> None:
        """
        –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ.
        :param table: –∏–º—è —Ç–∞–±–ª–∏—Ü—ã
        :param data: dict —Å –∏–∑–º–µ–Ω—è–µ–º—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        :param where: SQL-—É—Å–ª–æ–≤–∏–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä "id=$1"
        :param params: —Å–ø–∏—Å–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è —É—Å–ª–æ–≤–∏—è
        """
        set_expr = ", ".join(f"{k}=${i + 1}" for i, k in enumerate(data.keys()))
        query = f"UPDATE {table} SET {set_expr} WHERE {where}"
        values = list(data.values()) + list(params)
        await self.execute(query, *values)
        logger.info(f"‚úèÔ∏è Updated {table}: {data}, WHERE {where} -> {params}")

    # ===== –ú–ï–¢–û–î –î–õ–Ø –î–û–ë–ê–í–õ–ï–ù–ò–Ø –ó–ê–ö–ê–ó–ê =====
    async def add_order(self, order_data: Dict[str, Any]) -> int:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –≤ —Ç–∞–±–ª–∏—Ü—É orders –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ ID.
        """
        keys = ", ".join(order_data.keys())
        placeholders = ", ".join(f"${i + 1}" for i in range(len(order_data)))
        query = f"INSERT INTO orders ({keys}) VALUES ({placeholders}) RETURNING order_id"
        values = list(order_data.values())

        async with self.pool.acquire() as conn:
            result = await conn.fetchval(query, *values)
            logger.info(f"‚úÖ New order added with ID: {result}")
            return result

    # ===== –ú–ï–¢–û–î–´ –î–õ–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ò =====
    async def get_total_orders_count(self) -> int:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤."""
        query = "SELECT COUNT(*) FROM orders;"
        return await self.fetchval(query)

    async def get_daily_orders_count(self) -> List[dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –ø–æ –¥–Ω—è–º."""
        query = """
        SELECT
            DATE(created_at) AS date,
            COUNT(*) AS count
        FROM orders
        GROUP BY date
        ORDER BY date;
        """
        records = await self.fetch(query)
        return [{"date": record['date'].strftime('%Y-%m-%d'), "count": record['count']} for record in records]

    async def get_popular_drinks(self) -> List[dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–ø-5 —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –Ω–∞–ø–∏—Ç–∫–æ–≤."""
        query = """
        SELECT
            type,
            COUNT(*) AS count
        FROM orders
        GROUP BY type
        ORDER BY count DESC
        LIMIT 5;
        """
        records = await self.fetch(query)
        return [{"type": record['type'], "count": record['count']} for record in records]

    async def get_free_orders_count(self) -> int:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤."""
        query = "SELECT COUNT(*) FROM orders WHERE is_free = TRUE;"
        return await self.fetchval(query)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
postgres_client = PostgresClient()
