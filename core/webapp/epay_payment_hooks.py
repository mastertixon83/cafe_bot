# core/webhooks/epay_payment_hooks.py

from fastapi import APIRouter, Request, Depends, HTTPException, BackgroundTasks
from pydantic import BaseModel, Field
from loguru import logger
from aiogram import Bot, Dispatcher
from aiogram.fsm.context import FSMContext
import json
from aiogram.fsm.storage.base import StorageKey

from core.utils.database import postgres_client

router = APIRouter()


# --- –ú–û–î–ï–õ–¨ –î–ê–ù–ù–´–• ---
class EpayWebhook(BaseModel):
    invoice_id: str = Field(..., alias="invoiceId")
    status: str
    amount: int
    currency: str


# --- DEPENDENCIES –î–õ–Ø –î–û–°–¢–£–ü–ê –ö BOT –ò DISPATCHER ---
def get_bot(request: Request) -> Bot:
    if not hasattr(request.app.state, 'bot_instance') or not request.app.state.bot_instance:
        raise HTTPException(status_code=500, detail="Bot instance not available.")
    return request.app.state.bot_instance


def get_dispatcher(request: Request) -> Dispatcher:
    if not hasattr(request.app.state, 'dp') or not request.app.state.dp:
        raise HTTPException(status_code=500, detail="Dispatcher instance not available.")
    return request.app.state.dp


# --- –§–û–ù–û–í–ê–Ø –ó–ê–î–ê–ß–ê –î–õ–Ø –û–ë–†–ê–ë–û–¢–ö–ò –£–°–ü–ï–®–ù–û–ì–û –ü–õ–ê–¢–ï–ñ–ê ---
async def process_successful_payment(payment_id: str, bot: Bot, dp: Dispatcher):
    """
    –§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø.
    –°–æ–∑–¥–∞–µ—Ç –∑–∞–∫–∞–∑, –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ü–†–ê–í–ò–õ–¨–ù–û –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
    """
    from core.handlers.basic import process_and_save_order
    from core.keyboards.inline.inline_menu import ready_cofe_ikb
    from core.utils.states import Order  # <-- –î–û–ë–ê–í–¨ –≠–¢–û–¢ –ò–ú–ü–û–†–¢
    import json

    logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ #{payment_id}")

    payment = await postgres_client.fetchrow(
        "SELECT * FROM payments WHERE payment_id = $1 AND status = 'pending'", payment_id
    )
    if not payment:
        logger.warning(f"–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞: –ü–ª–∞—Ç–µ–∂ #{payment_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.")
        return

    user_id = payment['user_id']
    order_data = json.loads(payment['order_data'])
    amount = payment['amount']

    user_info = await postgres_client.fetchrow("SELECT username, first_name FROM users WHERE telegram_id = $1", user_id)
    if not user_info:
        # ... (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏)
        return

    order_record = await process_and_save_order(
        order_data=order_data, user_id=user_id, username=user_info['username'],
        first_name=user_info['first_name'], bot=bot, payment_id=payment_id, status='new'
    )

    storage_key = StorageKey(bot_id=bot.id, chat_id=user_id, user_id=user_id)
    state = FSMContext(storage=dp.storage, key=storage_key)
    state_data = await state.get_data()

    if order_record:
        await postgres_client.update(
            "payments", {"status": "paid", "order_id": order_record['order_id']}, "payment_id = $1", [payment_id]
        )
        order_id = order_record['order_id']

        try:
            last_callback_query = state_data.get('last_callback')
            if last_callback_query:
                caption_text = (f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ ‚Ññ{order_id} –Ω–∞ —Å—É–º–º—É {amount} –¢ —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω!\n"
                                f"–ö–æ–≥–¥–∞ –±—É–¥–µ—à—å —É –≤—Ö–æ–¥–∞ ‚Äî –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –∏ –º—ã –≤—ã–Ω–µ—Å–µ–º –Ω–∞–ø–∏—Ç–æ–∫ üëá")
                await bot.edit_message_caption(
                    chat_id=user_id,
                    message_id=last_callback_query['message']['message_id'],
                    caption=caption_text,
                    reply_markup=ready_cofe_ikb
                )
                logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ.")
            else:
                raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω last_callback")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã: {e}. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ.")
            text = f"‚úÖ –í–∞—à–∞ –ø–æ–∫—É–ø–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –ó–∞–∫–∞–∑ ‚Ññ{order_id} –æ—Ñ–æ—Ä–º–ª–µ–Ω."
            await bot.send_message(chat_id=user_id, text=text)

        # ----- –í–û–¢ –ì–õ–ê–í–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï -----
        # –í–º–µ—Å—Ç–æ state.clear() –º—ã –ø–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
        await state.set_state(Order.ready)
        await state.update_data(last_order_id=order_id)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ Order.ready –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}.")
        # ------------------------------------
    else:
        await postgres_client.update("payments", {"status": "error"}, "payment_id = $1", [payment_id])
        text = f"‚ùå –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."
        await bot.send_message(chat_id=user_id, text=text)


# --- –ì–õ–ê–í–ù–´–ô –•–ï–ù–î–õ–ï–† –í–ï–ë–•–£–ö–ê ---
@router.post("/epay", include_in_schema=False)
async def process_epay_webhook(
        payload: EpayWebhook,
        background_tasks: BackgroundTasks,
        bot: Bot = Depends(get_bot),
        dp: Dispatcher = Depends(get_dispatcher)
):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –≤–µ–±—Ö—É–∫ –æ—Ç Epay: {payload.model_dump_json(indent=2)}")
    payment_id = payload.invoice_id

    # ----- –°–¢–†–û–ö–ê –û–ë–ù–û–í–õ–ï–ù–ò–Ø –°–¢–ê–¢–£–°–ê –£–î–ê–õ–ï–ù–ê –û–¢–°–Æ–î–ê -----

    if payload.status.lower() == "paid":
        background_tasks.add_task(process_successful_payment, payment_id, bot, dp)
        logger.info(f"–ó–∞–¥–∞—á–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ #{payment_id} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ñ–æ–Ω.")

    elif payload.status.lower() == "failed":
        await postgres_client.update("payments", {"status": "failed"}, "payment_id = $1", [payment_id])
        payment = await postgres_client.fetchrow("SELECT user_id FROM payments WHERE payment_id = $1", payment_id)
        if payment:
            await bot.send_message(payment['user_id'], "‚ùå –í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    return {"status": "ok"}
