document.addEventListener('DOMContentLoaded', () => {
    const tg = window.Telegram.WebApp;
    if (tg) {
        tg.expand();
        tg.setHeaderColor('#1a1a1a');
        tg.setBackgroundColor('#1a1a1a');
    }

    const ordersContainer = document.getElementById('orders-container');
    const statusIndicator = document.getElementById('status-indicator');
    const tabs = document.querySelectorAll('.tab-button');

    // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –í–°–ï–• –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ (new, in_progress, ready, arrived)
    let allActiveOrders = [];
    let activeStatus = 'new';

    tabs.forEach(tab => {
        tab.addEventListener('click', () => {
            const newStatus = tab.dataset.status;
            if (newStatus === activeStatus) return;

            activeStatus = newStatus;
            tabs.forEach(t => t.classList.remove('active'));
            tab.classList.add('active');

            // –ï—Å–ª–∏ –∫–ª–∏–∫–Ω—É–ª–∏ –Ω–∞ "–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ", –¥–µ–ª–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å.
            // –ò–Ω–∞—á–µ, –ø—Ä–æ—Å—Ç–æ —Ñ–∏–ª—å—Ç—Ä—É–µ–º —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã.
            if (activeStatus === 'completed') {
                fetchCompletedOrders();
            } else {
                renderVisibleOrders();
            }
        });
    });

    // --- –§—É–Ω–∫—Ü–∏–∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ ---

    // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ–ø–µ—Ä—å –ø—Ä–æ—Å—Ç–æ —Ä–∏—Å—É–µ—Ç —Ç–æ, —á—Ç–æ –µ–π –¥–∞–ª–∏, –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ activeStatus
    function renderVisibleOrders() {
        if (!ordersContainer) return;
        ordersContainer.innerHTML = '';

        // –§–∏–ª—å—Ç—Ä—É–µ–º –ì–õ–û–ë–ê–õ–¨–ù–´–ô –º–∞—Å—Å–∏–≤ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–µ
        const visibleOrders = allActiveOrders.filter(order => order.status === activeStatus);

        if (visibleOrders.length === 0) {
            ordersContainer.innerHTML = '<p class="empty-state">–ó–¥–µ—Å—å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤</p>';
            return;
        }

        visibleOrders
            .sort((a, b) => a.order_id - b.order_id) // –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Ç —Å—Ç–∞—Ä–æ–≥–æ –∫ –Ω–æ–≤–æ–º—É –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö
            .forEach(renderOrderCard);
    }

    // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ä–∏—Å—É–µ—Ç —Ç–æ–ª—å–∫–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
    function renderCompletedOrders(completedOrders) {
        if (!ordersContainer) return;
        ordersContainer.innerHTML = '';

        if (completedOrders.length === 0) {
            ordersContainer.innerHTML = '<p class="empty-state">–ó–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤</p>';
            return;
        }

        completedOrders
            .sort((a, b) => b.order_id - a.order_id) // –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Ç –Ω–æ–≤–æ–≥–æ –∫ —Å—Ç–∞—Ä–æ–º—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö
            .forEach(renderOrderCard);
    }

    function renderOrderCard(order) {
        if (!ordersContainer) return;
        const card = document.createElement('div');
        card.className = 'order-card';
        card.dataset.orderId = order.order_id;
        const icons = { type: '‚òïÔ∏è', syrup: 'üçØ', cup: 'ü•§', croissant: 'ü•ê', price: 'üí∞', time: 'üïí' };

        // –£–±–∏—Ä–∞–µ–º –ø–æ–ª–µ "–ü–æ–¥–æ–π–¥–µ—Ç —á–µ—Ä–µ–∑" –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
        const timeHTML = activeStatus !== 'completed'
            ? `<p>${icons.time} <b>–ü–æ–¥–æ–π–¥–µ—Ç —á–µ—Ä–µ–∑:</b> ${order.time || '?'}</p>`
            : '';

        card.innerHTML = `
            <h3>–ó–∞–∫–∞–∑ ‚Ññ${order.order_id}</h3>
            <div class="order-details">
                <p>${icons.type} <b>–ù–∞–ø–∏—Ç–æ–∫:</b> ${order.type || '?'}</p>
                <p>${icons.syrup} <b>–°–∏—Ä–æ–ø:</b> ${order.syrup || '–ù–µ—Ç'}</p>
                <p>${icons.cup} <b>–û–±—ä–µ–º:</b> ${order.cup || '?'}</p>
                <p>${icons.croissant} <b>–î–æ–±–∞–≤–∫–∞:</b> ${order.croissant || '–ù–µ—Ç'}</p>
                <p>${icons.price} <b>–°—É–º–º–∞:</b> ${order.total_price || '?'} –¢</p>
                ${timeHTML}
            </div>
            <div class="actions"></div>
        `;

        const actions = card.querySelector('.actions');
        actions.innerHTML = '';

        if (order.status === 'new') {
            const button = document.createElement('button');
            button.innerText = '–ü—Ä–∏–Ω—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É';
            button.className = 'new';
            button.onclick = () => updateOrderStatus(order.order_id, 'in_progress');
            actions.appendChild(button);
        } else if (order.status === 'in_progress') {
            const button = document.createElement('button');
            button.innerText = '–ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ';
            button.className = 'in_progress';
            button.onclick = () => updateOrderStatus(order.order_id, 'ready');
            actions.appendChild(button);
        } else if (order.status === 'ready') {
            const infoText = document.createElement('p');
            infoText.className = 'info-text';
            infoText.textContent = '–û–∂–∏–¥–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞';
            actions.appendChild(infoText);
        } else if (order.status === 'arrived') {
            const button = document.createElement('button');
            button.innerText = '–ó–∞–≤–µ—Ä—à–∏—Ç—å';
            button.className = 'ready';
            button.onclick = () => updateOrderStatus(order.order_id, 'completed');
            actions.appendChild(button);
        } else if (order.status === 'completed') {
            const infoText = document.createElement('p');
            infoText.className = 'info-text';
            const completedTime = new Date(order.updated_at || order.created_at).toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
            infoText.textContent = `–ó–∞–≤–µ—Ä—à–µ–Ω –≤ ${completedTime}`;
            actions.appendChild(infoText);
        }

        ordersContainer.appendChild(card);
    }

    // --- –°–µ—Ç–µ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¢–û–õ–¨–ö–û –ê–ö–¢–ò–í–ù–´–ï –∑–∞–∫–∞–∑—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö
    async function fetchActiveOrders() {
        try {
            const response = await fetch('/api/orders/');
            if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
            allActiveOrders = await response.json();
            // –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏, –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É
            if (activeStatus !== 'completed') {
                renderVisibleOrders();
            }
        } catch (error) {
            console.error("Failed to fetch active orders:", error);
            if (ordersContainer && activeStatus !== 'completed') {
                ordersContainer.innerHTML = `<p class="empty-state">–û—à–∏–±–∫–∞: ${error.message}.</p>`;
            }
        }
    }

    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¢–û–õ–¨–ö–û –ó–ê–í–ï–†–®–ï–ù–ù–´–ï –∑–∞–∫–∞–∑—ã –∏ —Å—Ä–∞–∑—É –∏—Ö —Ä–∏—Å—É–µ—Ç
    async function fetchCompletedOrders() {
        try {
            const response = await fetch('/api/orders/completed');
            if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
            const completedOrders = await response.json();
            renderCompletedOrders(completedOrders);
        } catch (error) {
            console.error("Failed to fetch completed orders:", error);
            if (ordersContainer) {
                ordersContainer.innerHTML = `<p class="empty-state">–û—à–∏–±–∫–∞: ${error.message}.</p>`;
            }
        }
    }

    async function updateOrderStatus(orderId, newStatus) {
        try {
            const response = await fetch(`/api/orders/${orderId}/status?status=${newStatus}`, { method: 'PUT' });
            if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
        } catch (error) {
            console.error("Failed to update status:", error);
            if (tg) tg.showAlert("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞.");
        }
    }

    function connectWebSocket() {
        const proto = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
        const ws = new WebSocket(`${proto}//${window.location.host}/ws/orders`);

        ws.onopen = () => { if (statusIndicator) statusIndicator.className = 'connected'; };

        ws.onmessage = (event) => {
            console.log('Update from server...');
            // –ü—Ä–∏ –ª—é–±–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞, –º—ã –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¢–û–õ–¨–ö–û –ê–ö–¢–ò–í–ù–´–ï –∑–∞–∫–∞–∑—ã
            fetchActiveOrders();
            // –ï—Å–ª–∏ –º—ã —Å–µ–π—á–∞—Å –Ω–∞ –≤–∫–ª–∞–¥–∫–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö, –µ–µ —Ç–æ–∂–µ –Ω–∞–¥–æ –æ–±–Ω–æ–≤–∏—Ç—å
            if (activeStatus === 'completed') {
                fetchCompletedOrders();
            }

            const data = JSON.parse(event.data);
            if (data.type === 'new_order' && tg) {
                tg.HapticFeedback.notificationOccurred('success');
            }
        };

        ws.onclose = () => {
            if (statusIndicator) statusIndicator.className = 'disconnected';
            setTimeout(connectWebSocket, 3000);
        };

        ws.onerror = (error) => {
            console.error('WebSocket Error:', error);
            if (statusIndicator) statusIndicator.className = 'disconnected';
            ws.close();
        };
    }

    // --- –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
    fetchActiveOrders();
    connectWebSocket();
});