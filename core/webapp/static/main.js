document.addEventListener('DOMContentLoaded', () => {
    const tg = window.Telegram.WebApp;
    if (tg) {
        tg.expand();
        tg.setHeaderColor('#1a1a1a');
        tg.setBackgroundColor('#1a1a1a');
    }

    const ordersContainer = document.getElementById('orders-container');
    const statusIndicator = document.getElementById('status-indicator');
    const tabs = document.querySelectorAll('.tab-button');

    let activeStatus = 'new';

    // --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ---
    tabs.forEach(tab => {
        tab.addEventListener('click', () => {
            activeStatus = tab.dataset.status;
            tabs.forEach(t => t.classList.remove('active'));
            tab.classList.add('active');
            // –ü—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –ª—é–±—É—é –≤–∫–ª–∞–¥–∫—É, –ø—Ä–æ—Å—Ç–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–Ω–æ–≤–æ
            fetchAndUpdateOrders();
        });
    });

    // --- –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ó–ê–ì–†–£–ó–ö–ò –ò –û–¢–†–ò–°–û–í–ö–ò ---
    async function fetchAndUpdateOrders() {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π URL –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
        let url = '/api/orders/';
        if (activeStatus === 'completed') {
            url = '/api/orders/completed';
        }

        try {
            const response = await fetch(url);
            if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
            const orders = await response.json();

            // --- –ù–ê–ß–ê–õ–û –ë–õ–û–ö–ê –†–ï–ù–î–ï–†–ò–ù–ì–ê ---
            if (!ordersContainer) return;
            ordersContainer.innerHTML = ''; // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä

            if (orders.length === 0) {
                const message = activeStatus === 'completed' ? '–ó–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤' : '–ó–¥–µ—Å—å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤';
                ordersContainer.innerHTML = `<p class="empty-state">${message}</p>`;
                return;
            }

            // –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–∫–∞–∑—ã (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ API –≤–µ—Ä–Ω—É–ª–æ –ª–∏—à–Ω–µ–µ)
            const visibleOrders = orders.filter(order => order.status === activeStatus);

            // –°–æ—Ä—Ç–∏—Ä—É–µ–º
            visibleOrders.sort((a, b) => activeStatus === 'completed' ? b.order_id - a.order_id : a.order_id - b.order_id);

            // –†–µ–Ω–¥–µ—Ä–∏–º –∫–∞–∂–¥—É—é –∫–∞—Ä—Ç–æ—á–∫—É
            visibleOrders.forEach(order => {
                const card = document.createElement('div');
                card.className = 'order-card';
                card.dataset.orderId = order.order_id;
                const icons = { type: '‚òïÔ∏è', syrup: 'üçØ', cup: 'ü•§', croissant: 'ü•ê', price: 'üí∞', time: 'üïí' };

                const timeHTML = activeStatus !== 'completed'
                    ? `<p>${icons.time} <b>–ü–æ–¥–æ–π–¥–µ—Ç —á–µ—Ä–µ–∑:</b> ${order.time || '?'}</p>`
                    : '';

                card.innerHTML = `
                    <h3>–ó–∞–∫–∞–∑ ‚Ññ${order.order_id}</h3>
                    <div class="order-details">
                        <p>${icons.type} <b>–ù–∞–ø–∏—Ç–æ–∫:</b> ${order.type || '?'}</p>
                        <p>${icons.syrup} <b>–°–∏—Ä–æ–ø:</b> ${order.syrup || '–ù–µ—Ç'}</p>
                        <p>${icons.cup} <b>–û–±—ä–µ–º:</b> ${order.cup || '?'}</p>
                        <p>${icons.croissant} <b>–î–æ–±–∞–≤–∫–∞:</b> ${order.croissant || '–ù–µ—Ç'}</p>
                        <p>${icons.price} <b>–°—É–º–º–∞:</b> ${order.total_price || '?'} –¢</p>
                        ${timeHTML}
                    </div>
                    <div class="actions"></div>
                `;

                const actions = card.querySelector('.actions');
                actions.innerHTML = '';

                if (order.status === 'new') {
                    const button = document.createElement('button');
                    button.innerText = '–ü—Ä–∏–Ω—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É';
                    button.className = 'new';
                    button.onclick = () => updateOrderStatus(order.order_id, 'in_progress');
                    actions.appendChild(button);
                } else if (order.status === 'in_progress') {
                    const button = document.createElement('button');
                    button.innerText = '–ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ';
                    button.className = 'in_progress';
                    button.onclick = () => updateOrderStatus(order.order_id, 'ready');
                    actions.appendChild(button);
                } else if (order.status === 'ready') {
                    const infoText = document.createElement('p');
                    infoText.className = 'info-text';
                    infoText.textContent = '–û–∂–∏–¥–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞';
                    actions.appendChild(infoText);

                    const button = document.createElement('button');
                    button.innerText = '–ó–∞–≤–µ—Ä—à–∏—Ç—å (–∫–ª–∏–µ–Ω—Ç –Ω–µ –ø—Ä–∏—à–µ–ª)';
                    button.className = 'cancel'; // –°–µ—Ä—ã–π —Ü–≤–µ—Ç
                    button.style.marginTop = '10px';
                    button.onclick = () => updateOrderStatus(order.order_id, 'completed');
                    actions.appendChild(button);
                } else if (order.status === 'arrived') {
                    const button = document.createElement('button');
                    button.innerText = '–ó–∞–≤–µ—Ä—à–∏—Ç—å';
                    button.className = 'ready';
                    button.onclick = () => updateOrderStatus(order.order_id, 'completed');
                    actions.appendChild(button);
                } else if (order.status === 'completed') {
                    const infoText = document.createElement('p');
                    infoText.className = 'info-text';
                    const completedTime = new Date(order.updated_at || order.created_at).toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
                    infoText.textContent = `–ó–∞–≤–µ—Ä—à–µ–Ω –≤ ${completedTime}`;
                    actions.appendChild(infoText);
                }

                ordersContainer.appendChild(card);
            });
            // --- –ö–û–ù–ï–¶ –ë–õ–û–ö–ê –†–ï–ù–î–ï–†–ò–ù–ì–ê ---

        } catch (error) {
            console.error(`Failed to fetch orders from ${url}:`, error);
            if (ordersContainer) {
                ordersContainer.innerHTML = `<p class="empty-state">–û—à–∏–±–∫–∞: ${error.message}.</p>`;
            }
        }
    }

    async function updateOrderStatus(orderId, newStatus) {
        try {
            const response = await fetch(`/api/orders/${orderId}/status?status=${newStatus}`, { method: 'PUT' });
            if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
        } catch (error) {
            console.error("Failed to update status:", error);
            if (tg) tg.showAlert("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞.");
        }
    }

    function connectWebSocket() {
        const proto = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
        const ws = new WebSocket(`${proto}//${window.location.host}/ws/orders`);

        ws.onopen = () => { if (statusIndicator) statusIndicator.className = 'connected'; };

        ws.onmessage = (event) => {
            console.log('Update from server...');
            // –ü—Ä–∏ –ª—é–±–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–∫—É—â–µ–π –≤–∫–ª–∞–¥–∫–∏
            fetchAndUpdateOrders();

            const data = JSON.parse(event.data);
            if (data.type === 'new_order' && tg) {
                tg.HapticFeedback.notificationOccurred('success');
            }
        };

        ws.onclose = () => {
            if (statusIndicator) statusIndicator.className = 'disconnected';
            setTimeout(connectWebSocket, 3000);
        };

        ws.onerror = (error) => {
            console.error('WebSocket Error:', error);
            if (statusIndicator) statusIndicator.className = 'disconnected';
            ws.close();
        };
    }

    // --- –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
    fetchAndUpdateOrders();
    connectWebSocket();
});